{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>. c</p> <p> </p> <p>Read Latest Documentation - Browse GitHub Code Repository</p> <p>isort your imports, so you don't have to.</p> <p>isort is a Python utility / library to sort imports alphabetically and automatically separate into sections and by type. It provides a command line utility, Python library and plugins for various editors to quickly sort all your imports. It requires Python 3.9+ to run but supports formatting Python 2 code too.</p> <ul> <li>Try isort now from your browser!</li> <li>Using black? See the isort and black compatibility guide.</li> <li>isort has official support for pre-commit!</li> </ul> <p></p> <p>Before isort:</p> <pre><code>from my_lib import Object\n\nimport os\n\nfrom my_lib import Object3\n\nfrom my_lib import Object2\n\nimport sys\n\nfrom third_party import lib15, lib1, lib2, lib3, lib4, lib5, lib6, lib7, lib8, lib9, lib10, lib11, lib12, lib13, lib14\n\nimport sys\n\nfrom __future__ import absolute_import\n\nfrom third_party import lib3\n\nprint(\"Hey\")\nprint(\"yo\")\n</code></pre> <p>After isort:</p> <pre><code>from __future__ import absolute_import\n\nimport os\nimport sys\n\nfrom third_party import (lib1, lib2, lib3, lib4, lib5, lib6, lib7, lib8,\n                         lib9, lib10, lib11, lib12, lib13, lib14, lib15)\n\nfrom my_lib import Object, Object2, Object3\n\nprint(\"Hey\")\nprint(\"yo\")\n</code></pre>"},{"location":"#installing-isort","title":"Installing isort","text":"<p>Installing isort is as simple as:</p> <pre><code>pip install isort\n</code></pre>"},{"location":"#using-isort","title":"Using isort","text":"<p>From the command line:</p> <p>To run on specific files:</p> <pre><code>isort mypythonfile.py mypythonfile2.py\n</code></pre> <p>To apply recursively:</p> <pre><code>isort .\n</code></pre> <p>If globstar is enabled, <code>isort .</code> is equivalent to:</p> <pre><code>isort **/*.py\n</code></pre> <p>To view proposed changes without applying them:</p> <pre><code>isort mypythonfile.py --diff\n</code></pre> <p>Finally, to atomically run isort against a project, only applying changes if they don't introduce syntax errors:</p> <pre><code>isort --atomic .\n</code></pre> <p>(Note: this is disabled by default, as it prevents isort from running against code written using a different version of Python.)</p> <p>From within Python:</p> <pre><code>import isort\n\nisort.file(\"pythonfile.py\")\n</code></pre> <p>or:</p> <pre><code>import isort\n\nsorted_code = isort.code(\"import b\\nimport a\\n\")\n</code></pre>"},{"location":"#installing-isorts-for-your-preferred-text-editor","title":"Installing isort's for your preferred text editor","text":"<p>Several plugins have been written that enable to use isort from within a variety of text-editors. You can find a full list of them on the isort wiki. Additionally, I will enthusiastically accept pull requests that include plugins for other text editors and add documentation for them as I am notified.</p>"},{"location":"#multi-line-output-modes","title":"Multi line output modes","text":"<p>You will notice above the \\\"multi_line_output\\\" setting. This setting defines how from imports wrap when they extend past the line_length limit and has 12 possible settings.</p>"},{"location":"#indentation","title":"Indentation","text":"<p>To change the how constant indents appear - simply change the indent property with the following accepted formats:</p> <ul> <li>Number of spaces you would like. For example: 4 would cause standard     4 space indentation.</li> <li>Tab</li> <li>A verbatim string with quotes around it.</li> </ul> <p>For example:</p> <pre><code>\"    \"\n</code></pre> <p>is equivalent to 4.</p> <p>For the import styles that use parentheses, you can control whether or not to include a trailing comma after the last import with the <code>include_trailing_comma</code> option (defaults to <code>False</code>).</p>"},{"location":"#intelligently-balanced-multi-line-imports","title":"Intelligently Balanced Multi-line Imports","text":"<p>As of isort 3.1.0 support for balanced multi-line imports has been added. With this enabled isort will dynamically change the import length to the one that produces the most balanced grid, while staying below the maximum import length defined.</p> <p>Example:</p> <pre><code>from __future__ import (absolute_import, division,\n                        print_function, unicode_literals)\n</code></pre> <p>Will be produced instead of:</p> <pre><code>from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n</code></pre> <p>To enable this set <code>balanced_wrapping</code> to <code>True</code> in your config or pass the <code>-e</code> option into the command line utility.</p>"},{"location":"#custom-sections-and-ordering","title":"Custom Sections and Ordering","text":"<p>isort provides configuration options to change almost every aspect of how imports are organized, ordered, or grouped together in sections.</p> <p>Click here for an overview of all these options.</p>"},{"location":"#skip-processing-of-imports-outside-of-configuration","title":"Skip processing of imports (outside of configuration)","text":"<p>To make isort ignore a single import simply add a comment at the end of the import line containing the text <code>isort:skip</code>:</p> <pre><code>import module  # isort:skip\n</code></pre> <p>or:</p> <pre><code>from xyz import (abc,  # isort:skip\n                 yo,\n                 hey)\n</code></pre> <p>To make isort skip an entire file simply add <code>isort:skip_file</code> to the module's doc string:</p> <pre><code>\"\"\" my_module.py\n    Best module ever\n\n   isort:skip_file\n\"\"\"\n\nimport b\nimport a\n</code></pre>"},{"location":"#adding-or-removing-an-import-from-multiple-files","title":"Adding or removing an import from multiple files","text":"<p>isort can be ran or configured to add / remove imports automatically.</p> <p>See a complete guide here.</p>"},{"location":"#using-isort-to-verify-code","title":"Using isort to verify code","text":""},{"location":"#the-check-only-option","title":"The <code>--check-only</code> option","text":"<p>isort can also be used to verify that code is correctly formatted by running it with <code>-c</code>. Any files that contain incorrectly sorted and/or formatted imports will be outputted to <code>stderr</code>.</p> <pre><code>isort **/*.py -c -v\n\nSUCCESS: /home/timothy/Projects/Open_Source/isort/isort_kate_plugin.py Everything Looks Good!\nERROR: /home/timothy/Projects/Open_Source/isort/isort/isort.py Imports are incorrectly sorted.\n</code></pre> <p>One great place this can be used is with a pre-commit git hook, such as this one by \\@acdha:</p> <p>https://gist.github.com/acdha/8717683</p> <p>This can help to ensure a certain level of code quality throughout a project.</p>"},{"location":"#git-hook","title":"Git hook","text":"<p>isort provides a hook function that can be integrated into your Git pre-commit script to check Python code before committing.</p> <p>More info here.</p>"},{"location":"#setuptools-integration","title":"Setuptools integration","text":"<p>Upon installation, isort enables a <code>setuptools</code> command that checks Python files declared by your project.</p> <p>More info here.</p>"},{"location":"#spread-the-word","title":"Spread the word","text":"<p>Place this badge at the top of your repository to let others know your project uses isort.</p> <p>For README.md:</p> <pre><code>[![Imports: isort](https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&amp;labelColor=ef8336)](https://pycqa.github.io/isort/)\n</code></pre> <p>Or README.rst:</p> <pre><code>.. image:: https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&amp;labelColor=ef8336\n    :target: https://pycqa.github.io/isort/\n</code></pre>"},{"location":"#security-contact-information","title":"Security contact information","text":"<p>To report a security vulnerability, please use the Tidelift security contact. Tidelift will coordinate the fix and disclosure.</p>"},{"location":"#why-isort","title":"Why isort?","text":"<p>isort simply stands for import sort. It was originally called \"sortImports\" however I got tired of typing the extra characters and came to the realization camelCase is not pythonic.</p> <p>I wrote isort because in an organization I used to work in the manager came in one day and decided all code must have alphabetically sorted imports. The code base was huge - and he meant for us to do it by hand. However, being a programmer - I\\'m too lazy to spend 8 hours mindlessly performing a function, but not too lazy to spend 16 hours automating it. I was given permission to open source sortImports and here we are :)</p> <p>Get professionally supported isort with the Tidelift Subscription</p> <p>Professional support for isort is available as part of the Tidelift Subscription. Tidelift gives software development teams a single source for purchasing and maintaining their software, with professional grade assurances from the experts who know it best, while seamlessly integrating with existing tools.</p> <p>Thanks and I hope you find isort useful!</p> <p>~Timothy Crosley</p>"},{"location":"configuration/action_comments/","title":"Action Comments","text":"<p>The most basic way to configure the flow of isort within a single file is action comments. These comments are picked up and interpreted by the isort parser during parsing.</p>"},{"location":"configuration/action_comments/#isort-skip_file","title":"isort: skip_file","text":"<p>Tells isort to skip the entire file.</p> <p>Example:</p> <pre><code># !/bin/python3\n# isort: skip_file\nimport os\nimport sys\n\n...\n</code></pre> <p>Warning</p> <p>This should be placed as high in the file as reasonably possible. Since isort uses a streaming architecture, it may have already completed some work before it reaches the comment. Usually, this is okay - but can be confusing if --diff or any interactive options are used from the command line.</p>"},{"location":"configuration/action_comments/#isort-skip","title":"isort: skip","text":"<p>If placed on the same line as (or within the continuation of a) an import statement, isort will not sort this import. More specifically, it prevents the import statement from being recognized by isort as an import. In consequence, this line will be treated as code and be pushed down to below the import section of the file.</p> <p>Example:</p> <pre><code>import b\nimport a # isort: skip &lt;- this will now stay below b\n</code></pre> <p>Note</p> <p>It is recommended to where possible use <code># isort: off</code> and <code># isort: on</code> or <code># isort: split</code> instead as the behavior is more explicit and predictable.</p>"},{"location":"configuration/action_comments/#isort-off","title":"isort: off","text":"<p>Turns isort parsing off. Every line after an <code># isort: off</code> statement will be passed along unchanged until an <code># isort: on</code> comment or the end of the file.</p> <p>Example:</p> <pre><code>import e\nimport f\n\n# isort: off\n\nimport b\nimport a\n</code></pre>"},{"location":"configuration/action_comments/#isort-on","title":"isort: on","text":"<p>Turns isort parsing back on. This only makes sense if an <code># isort: off</code> comment exists higher in the file! This allows you to have blocks of unsorted imports, around otherwise sorted ones.</p> <p>Example:</p> <pre><code>import e\nimport f\n\n# isort: off\n\nimport b\nimport a\n\n# isort: on\n\nimport c\nimport d\n</code></pre>"},{"location":"configuration/action_comments/#isort-split","title":"isort: split","text":"<p>Tells isort the current sort section is finished, and all future imports belong to a new sort grouping.</p> <p>Example:</p> <pre><code>import e\nimport f\n\n# isort: split\n\nimport a\nimport b\nimport c\nimport d\n</code></pre> <p>You can also use it inline to keep an import from having imports above or below it swap position:</p> <pre><code>import c\nimport b  # isort: split\nimport a\n</code></pre> <p>Tip</p> <p>isort split is exactly the same as placing an <code># isort: on</code> immediately below an <code># isort: off</code></p>"},{"location":"configuration/action_comments/#isort-dont-add-imports","title":"isort: dont-add-imports","text":"<p>Tells isort to not automatically add imports to this file, even if --add-imports is set.</p>"},{"location":"configuration/action_comments/#isort-dont-add-import-import_line","title":"isort: dont-add-import: [IMPORT_LINE]","text":"<p>Tells isort to not automatically add a particular import, even if --add-imports says to add it.</p>"},{"location":"configuration/add_or_remove_imports/","title":"Add or remove imports","text":""},{"location":"configuration/add_or_remove_imports/#adding-an-import-to-multiple-files","title":"Adding an import to multiple files","text":"<p>isort makes it easy to add an import statement across multiple files, while being assured it's correctly placed.</p> <p>To add an import to all files:</p> <pre><code>isort -a \"from __future__ import print_function\" *.py\n</code></pre> <p>To add an import only to files that already have imports:</p> <pre><code>isort -a \"from __future__ import print_function\" --append-only *.py\n</code></pre>"},{"location":"configuration/add_or_remove_imports/#removing-an-import-from-multiple-files","title":"Removing an import from multiple files","text":"<p>isort also makes it easy to remove an import from multiple files, without having to be concerned with how it was originally formatted.</p> <p>From the command line:</p> <pre><code>isort --rm \"os.system\" *.py\n</code></pre>"},{"location":"configuration/black_compatibility/","title":"Black compatibility","text":""},{"location":"configuration/black_compatibility/#compatibility-with-black","title":"Compatibility with black","text":"<p>Compatibility with black is very important to the isort project and comes baked in starting with version 5. All that's required to use isort alongside black is to set the isort profile to \"black\".</p> <p>Tip</p> <p>Beyond the profile, it is common to set skip_gitignore (which is not enabled by default for isort as it requires git to be installed) and line_length as it is common to deviate from black's default of 88.</p>"},{"location":"configuration/black_compatibility/#using-a-config-file-such-as-isortcfg","title":"Using a config file (such as .isort.cfg)","text":"<p>For projects that officially use both isort and black, we recommend setting the black profile in a config file at the root of your project's repository. That way it's independent of how users call isort (pre-commit, CLI, or editor integration) the black profile will automatically be applied.</p> <p>For instance, your pyproject.toml file would look something like</p> <pre><code>[tool.isort]\nprofile = \"black\"\n</code></pre> <p>Read More about supported config files.</p>"},{"location":"configuration/black_compatibility/#cli","title":"CLI","text":"<p>To use the profile option when calling isort directly from the commandline simply add the --profile black argument: <code>isort --profile black</code>.</p> <p>A demo of how this would look like in your .travis.yml</p> <pre><code>language: python\npython:\n  - \"3.10\"\n  - \"3.9\"\n\ninstall:\n  - pip install -r requirements-dev.txt\n  - pip install isort black\n  - pip install coveralls\nscript:\n  - pytest my-package\n  - isort --profile black my-package\n  - black --check --diff my-package\nafter_success:\n  - coveralls\n</code></pre> <p>See built-in profiles for more profiles.</p>"},{"location":"configuration/black_compatibility/#integration-with-pre-commit","title":"Integration with pre-commit","text":"<p>You can also set the profile directly when integrating isort within pre-commit.</p> <pre><code>  - repo: https://github.com/pycqa/isort\n    rev: 5.13.2\n    hooks:\n      - id: isort\n        args: [\"--profile\", \"black\", \"--filter-files\"]\n</code></pre>"},{"location":"configuration/config_files/","title":"Supported Config Files","text":"<p>isort supports various standard config formats to allow customizations to be integrated into any project quickly. When applying configurations, isort looks for the closest supported config file, in the order files are listed below. You can manually specify the settings file or path by setting <code>--settings-path</code> from the command-line. Otherwise, isort will traverse up to 25 parent directories until it finds a suitable config file. Note that isort will not leave a git or Mercurial repository (checking for a <code>.git</code> or <code>.hg</code> directory). As soon as it finds a file, it stops looking. The config file search is done relative to the current directory if <code>isort .</code> or a file stream is passed in, or relative to the first path passed in if multiple paths are passed in. isort never merges config files together due to the confusion it can cause.</p> <p>Tip</p> <p>You can always introspect the configuration settings isort determined, and find out which config file it picked up, by running <code>isort . --show-config</code></p>"},{"location":"configuration/config_files/#isortcfg-preferred-format","title":".isort.cfg [preferred format]","text":"<p>The first place isort will look for settings is in dedicated .isort.cfg files. The advantage of using this kind of config file, is that it is explicitly for isort and follows a well understood format. The downside, is that it means one more config file in your project when you may already have several polluting your file hierarchy.</p> <p>An example a config from the isort project itself:</p> <pre><code>[settings]\nprofile=hug\nsrc_paths=isort,test\n</code></pre>"},{"location":"configuration/config_files/#pyprojecttoml-preferred-format","title":"pyproject.toml [preferred format]","text":"<p>The second place isort will look, and an equally excellent choice to place your configuration, is within a pyproject.toml file. The advantage of using this config file, is that it is quickly becoming a standard place to configure all Python tools. This means other developers will know to look here and you will keep your projects root nice and tidy. The only disadvantage is that other tools you use might not yet support this format, negating the cleanliness.</p> <pre><code>[tool.isort]\nprofile = \"hug\"\nsrc_paths = [\"isort\", \"test\"]\n</code></pre>"},{"location":"configuration/config_files/#setupcfg","title":"setup.cfg","text":"<p><code>setup.cfg</code> can be thought of as the precursor to <code>pyproject.toml</code>. While isort and newer tools are increasingly moving to pyproject.toml, if you rely on many tools that use this standard it can be a natural fit to put your isort config there as well.</p> <pre><code>[isort]\nprofile=hug\nsrc_paths=isort,test\n</code></pre>"},{"location":"configuration/config_files/#toxini","title":"tox.ini","text":"<p>tox is a tool commonly used in the Python community to specify multiple testing environments. Because isort verification is commonly ran as a testing step, some prefer to place the isort config inside of the tox.ini file.</p> <pre><code>[isort]\nprofile = black\nmulti_line_output = 3\n</code></pre>"},{"location":"configuration/config_files/#editorconfig","title":".editorconfig","text":"<p>Finally, isort will look for a <code>.editorconfig</code> configuration with settings for Python source files. EditorConfig is a project to enable specifying a configuration for text editing behaviour once, allowing multiple command line tools and text editors to pick it up. Since isort cares about a lot of the same settings as a text-editor (like line-length) it makes sense for it to look within these files as well.</p> <pre><code>root = true\n\n[*.py]\nprofile = hug\nindent_style = space\nindent_size = 4\nskip = build,.tox,venv\nsrc_paths=isort,test\n</code></pre>"},{"location":"configuration/config_files/#custom-config-files","title":"Custom config files","text":"<p>Optionally, you can also create a config file with a custom name, or directly point isort to a config file that falls lower in the priority order, by using --settings-file. This can be useful, for instance, if you want to have one configuration for <code>.py</code> files and another for <code>.pyx</code> - while keeping the config files at the root of your repository.</p> <p>Tip</p> <p>Custom config files should place their configuration options inside an <code>[isort]</code> section and never a generic <code>[settings]</code> section. This is because isort can't know for sure how other tools are utilizing the config file.</p>"},{"location":"configuration/config_files/#supporting-multiple-config-files-in-single-isort-run","title":"Supporting multiple config files in single isort run","text":"<p>If you have a directory structure where different sub-directories may have their separate configuration settings and you want isort to respect these configurations, not just apply the same global configuration for the entire directory then you can do so with the <code>--resolve-all-configs</code> flag. Using the <code>--resolve-all-configs</code> along with providing the directory root as <code>--config-root</code> argument(if the config-root is not explicitly defined, then isort will consider the current directory <code>.</code> where the shell is running), isort will traverse and parse all the config files defined under the <code>--config-root</code> and dynamically decide what configurations should be applied to a specific file by choosing the nearest config file in the file's path. For instance, if your directory structure is</p> <pre><code>directory_root\n\n    subdir1\n        .isort.cfg\n        file1.py\n\n    subdir2\n        pyproject.toml\n        file2.py\n\n    subdir3\n        file3.py\n\n    setup.cfg\n</code></pre> <p>isort will sort <code>subdir1/file1</code> according to the configurations defined in <code>subdir1/.isort.cfg</code>, <code>subdir2/file2</code> with configurations from <code>subdir2/pyproject.toml</code> and <code>subdir3/file3.py</code> based on the <code>setup.cfg</code> settings.</p> <p>Tip</p> <p>You can always confirm exactly what config file was used for a file by running isort with the <code>--verbose</code> flag.</p>"},{"location":"configuration/custom_sections_and_ordering/","title":"Custom Sections and Ordering","text":"<p>isort provides lots of features to enable configuring how it sections imports and how it sorts imports within those sections. You can change the section order with <code>sections</code> option from the default of:</p> <pre><code>FUTURE,STDLIB,THIRDPARTY,FIRSTPARTY,LOCALFOLDER\n</code></pre> <p>to your preference (if defined, omitting a default section may cause errors):</p> <pre><code>sections=FUTURE,STDLIB,FIRSTPARTY,THIRDPARTY,LOCALFOLDER\n</code></pre> <p>You also can define your own sections and their order.</p> <p>Example:</p> <pre><code>known_django=django\nknown_pandas=pandas,numpy\nsections=FUTURE,STDLIB,DJANGO,THIRDPARTY,PANDAS,FIRSTPARTY,LOCALFOLDER\n</code></pre> <p>would create two new sections with the specified known modules.</p> <p>The <code>no_lines_before</code> option will prevent the listed sections from being split from the previous section by an empty line.</p> <p>Example:</p> <pre><code>sections=FUTURE,STDLIB,THIRDPARTY,FIRSTPARTY,LOCALFOLDER\nno_lines_before=LOCALFOLDER\n</code></pre> <p>would produce a section with both FIRSTPARTY and LOCALFOLDER modules combined.</p> <p>IMPORTANT NOTE: It is very important to know when setting <code>known</code> sections that the naming does not directly map for historical reasons. For custom settings, the only difference is capitalization (<code>known_custom=custom</code> VS <code>sections=CUSTOM,...</code>) for all others reference the following mapping:</p> <ul> <li><code>known_standard_library</code> : <code>STANDARD_LIBRARY</code></li> <li><code>extra_standard_library</code> : <code>STANDARD_LIBRARY</code> # Like known standard library but appends instead of replacing</li> <li><code>known_future_library</code> : <code>FUTURE</code></li> <li><code>known_first_party</code>: <code>FIRSTPARTY</code></li> <li><code>known_third_party</code>: <code>THIRDPARTY</code></li> <li><code>known_local_folder</code>: <code>LOCALFOLDER</code></li> </ul> <p>This will likely be changed in isort 6.0.0+ in a backwards compatible way.</p>"},{"location":"configuration/custom_sections_and_ordering/#auto-comment-import-sections","title":"Auto-comment import sections","text":"<p>Some projects prefer to have import sections uniquely titled to aid in identifying the sections quickly when visually scanning. isort can automate this as well. To do this simply set the <code>import_heading_{section_name}</code> setting for each section you wish to have auto commented - to the desired comment.</p> <p>For Example:</p> <pre><code>import_heading_stdlib=Standard Library\nimport_heading_firstparty=My Stuff\n</code></pre> <p>Would lead to output looking like the following:</p> <pre><code># Standard Library\nimport os\nimport sys\n\nimport django.settings\n\n# My Stuff\nimport myproject.test\n</code></pre>"},{"location":"configuration/custom_sections_and_ordering/#ordering-by-import-length","title":"Ordering by import length","text":"<p>isort also makes it easy to sort your imports by length, simply by setting the <code>length_sort</code> option to <code>True</code>. This will result in the following output style:</p> <pre><code>from evn.util import (\n    Pool,\n    Dict,\n    Options,\n    Constant,\n    DecayDict,\n    UnexpectedCodePath,\n)\n</code></pre> <p>It is also possible to opt-in to sorting imports by length for only specific sections by using <code>length_sort_</code> followed by the section name as a configuration item, e.g.:</p> <pre><code>length_sort_stdlib=1\n</code></pre>"},{"location":"configuration/custom_sections_and_ordering/#controlling-how-isort-sections-from-imports","title":"Controlling how isort sections <code>from</code> imports","text":"<p>By default isort places straight (<code>import y</code>) imports above from imports (<code>from x import y</code>):</p> <pre><code>import b\nfrom a import a  # This will always appear below because it is a from import.\n</code></pre> <p>However, if you prefer to keep strict alphabetical sorting you can set force sort within sections to true. Resulting in:</p> <pre><code>from a import a  # This will now appear at top because a appears in the alphabet before b\nimport b\n</code></pre> <p>You can even tell isort to always place from imports on top, instead of the default of placing them on bottom, using from first.</p> <pre><code>from b import b # If from first is set to True, all from imports will be placed before non-from imports.\nimport a\n</code></pre>"},{"location":"configuration/git_hook/","title":"Git Hook","text":"<p>isort provides a hook function that can be integrated into your Git pre-commit script to check Python code before committing.</p> <p>To cause the commit to fail if there are isort errors (strict mode), include the following in <code>.git/hooks/pre-commit</code>:</p> <pre><code>#!/usr/bin/env python\nimport sys\nfrom isort.hooks import git_hook\n\nsys.exit(git_hook(strict=True, modify=True, lazy=True, settings_file=\"\"))\n</code></pre> <p>If you just want to display warnings, but allow the commit to happen anyway, call <code>git_hook</code> without the strict parameter. If you want to display warnings, but not also fix the code, call <code>git_hook</code> without the modify parameter. The <code>lazy</code> argument is to support users who are \"lazy\" to add files individually to the index and tend to use <code>git commit -a</code> instead. Set it to <code>True</code> to ensure all tracked files are properly isorted, leave it out or set it to <code>False</code> to check only files added to your index.</p> <p>If you want to use a specific configuration file for the hook, you can pass its path to settings_file. If no path is specifically requested, <code>git_hook</code> will search for the configuration file starting at the directory containing the first staged file, as per <code>git diff-index</code> ordering, and going upward in the directory structure until a valid configuration file is found or <code>MAX_CONFIG_SEARCH_DEPTH</code> directories are checked. The settings_file parameter is used to support users who keep their configuration file in a directory that might not be a parent of all the other files.</p>"},{"location":"configuration/github_action/","title":"Github Action","text":"<p>isort provides an official Github Action that can be used as part of a CI/CD workflow to ensure a project's imports are properly sorted. The action can be found on the Github Actions Marketplace.</p>"},{"location":"configuration/github_action/#usage","title":"Usage","text":"<p>The <code>python-isort</code> plugin is designed to be run in combination with the <code>checkout</code> and <code>setup-python</code> actions. By default, it will run recursively from the root of the repository being linted and will exit with an error if the code is not properly sorted.</p>"},{"location":"configuration/github_action/#inputs","title":"Inputs","text":""},{"location":"configuration/github_action/#isort-version","title":"<code>isort-version</code>","text":"<p>Optional. Version of <code>isort</code> to use. Defaults to latest version of <code>isort</code>.</p>"},{"location":"configuration/github_action/#sort-paths","title":"<code>sort-paths</code>","text":"<p>Optional. List of paths to sort, relative to your project root. Defaults to <code>.</code></p>"},{"location":"configuration/github_action/#configuration","title":"<code>configuration</code>","text":"<p>Optional. <code>isort</code> configuration options to pass to the <code>isort</code> CLI. Defaults to <code>--check-only --diff</code>.</p>"},{"location":"configuration/github_action/#requirements-files","title":"<code>requirements-files</code>","text":"<p>Optional. Paths to python requirements files to install before running isort. If multiple requirements files are provided, they should be separated by a space. If custom package installation is required, dependencies should be installed in a separate step before using this action.</p> <p>Tip</p> <p>It is important that the project's dependencies be installed before running isort so that third-party libraries are properly sorted.</p>"},{"location":"configuration/github_action/#outputs","title":"Outputs","text":""},{"location":"configuration/github_action/#isort-result","title":"<code>isort-result</code>","text":"<p>Output of the <code>isort</code> CLI.</p>"},{"location":"configuration/github_action/#example-usage","title":"Example usage","text":"<pre><code>name: Run isort\non:\n  - push\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-python@v5\n        with:\n          python-version: 3.13\n      - uses: isort/isort-action@v1\n        with:\n            requirementsFiles: \"requirements.txt requirements-test.txt\"\n</code></pre>"},{"location":"configuration/multi_line_output_modes/","title":"Multi Line Output Modes","text":"<p>This config option defines how from imports wrap when they extend past the line_length limit and has 12 possible settings:</p>"},{"location":"configuration/multi_line_output_modes/#0-grid","title":"0 - Grid","text":"<pre><code>from third_party import (lib1, lib2, lib3,\n                         lib4, lib5, ...)\n</code></pre>"},{"location":"configuration/multi_line_output_modes/#1-vertical","title":"1 - Vertical","text":"<pre><code>from third_party import (lib1,\n                         lib2,\n                         lib3\n                         lib4,\n                         lib5,\n                         ...)\n</code></pre>"},{"location":"configuration/multi_line_output_modes/#2-hanging-indent","title":"2 - Hanging Indent","text":"<pre><code>from third_party import \\\n    lib1, lib2, lib3, \\\n    lib4, lib5, lib6\n</code></pre>"},{"location":"configuration/multi_line_output_modes/#3-vertical-hanging-indent","title":"3 - Vertical Hanging Indent","text":"<pre><code>from third_party import (\n    lib1,\n    lib2,\n    lib3,\n    lib4\n)\n</code></pre>"},{"location":"configuration/multi_line_output_modes/#4-hanging-grid","title":"4 - Hanging Grid","text":"<pre><code>from third_party import (\n    lib1, lib2, lib3, lib4,\n    lib5, ...)\n</code></pre>"},{"location":"configuration/multi_line_output_modes/#5-hanging-grid-grouped","title":"5 - Hanging Grid Grouped","text":"<pre><code>from third_party import (\n    lib1, lib2, lib3, lib4,\n    lib5, ...\n)\n</code></pre>"},{"location":"configuration/multi_line_output_modes/#6-hanging-grid-grouped","title":"6 - Hanging Grid Grouped","text":"<p>Same as Mode 5. Deprecated.</p>"},{"location":"configuration/multi_line_output_modes/#7-noqa","title":"7 - NOQA","text":"<pre><code>from third_party import lib1, lib2, lib3, ...  # NOQA\n</code></pre> <p>Alternatively, you can set <code>force_single_line</code> to <code>True</code> (<code>-sl</code> on the command line) and every import will appear on its own line:</p> <pre><code>from third_party import lib1\nfrom third_party import lib2\nfrom third_party import lib3\n...\n</code></pre>"},{"location":"configuration/multi_line_output_modes/#8-vertical-hanging-indent-bracket","title":"8 - Vertical Hanging Indent Bracket","text":"<p>Same as Mode 3 - Vertical Hanging Indent but the closing parentheses on the last line is indented.</p> <pre><code>from third_party import (\n    lib1,\n    lib2,\n    lib3,\n    lib4,\n    )\n</code></pre>"},{"location":"configuration/multi_line_output_modes/#9-vertical-prefix-from-module-import","title":"9 - Vertical Prefix From Module Import","text":"<p>Starts a new line with the same <code>from MODULE import</code> prefix when lines are longer than the line length limit.</p> <pre><code>from third_party import lib1, lib2, lib3\nfrom third_party import lib4, lib5, lib6\n</code></pre>"},{"location":"configuration/multi_line_output_modes/#10-hanging-indent-with-parentheses","title":"10 - Hanging Indent With Parentheses","text":"<p>Same as Mode 2 - Hanging Indent but uses parentheses instead of backslash for wrapping long lines.</p> <pre><code>from third_party import (\n    lib1, lib2, lib3,\n    lib4, lib5, lib6)\n</code></pre>"},{"location":"configuration/multi_line_output_modes/#11-backslash-grid","title":"11 - Backslash Grid","text":"<p>Same as Mode 0 - Grid but uses backslashes instead of parentheses to group imports.</p> <pre><code>from third_party import lib1, lib2, lib3, \\\n                        lib4, lib5\n</code></pre>"},{"location":"configuration/options/","title":"Configuration options for isort","text":"<p>As a code formatter isort has opinions. However, it also allows you to have your own. If your opinions disagree with those of isort, isort will disagree but commit to your way of formatting. To enable this, isort exposes a plethora of options to specify how you want your imports sorted, organized, and formatted.</p> <p>Too busy to build your perfect isort configuration? For curated common configurations, see isort's built-in profiles.</p>"},{"location":"configuration/options/#python-version","title":"Python Version","text":"<p>Tells isort to set the known standard library based on the specified Python version. Default is to assume any Python 3 version could be the target, and use a union of all stdlib modules across versions. If auto is specified, the version of the interpreter used to run isort (currently: 39) will be used.</p> <p>Type: String Default: <code>py3</code> Config default: <code>3</code> Python &amp; Config File Name: py_version CLI Flags:</p> <ul> <li>--py</li> <li>--python-version</li> </ul> <p>Examples:</p>"},{"location":"configuration/options/#example-isortcfg","title":"Example <code>.isort.cfg</code>","text":"<pre><code>[settings]\npy_version=39\n</code></pre>"},{"location":"configuration/options/#example-pyprojecttoml","title":"Example <code>pyproject.toml</code>","text":"<pre><code>[tool.isort]\npy_version=39\n</code></pre>"},{"location":"configuration/options/#example-cli-usage","title":"Example cli usage","text":"<p><code>isort --py 39</code></p>"},{"location":"configuration/options/#force-to-top","title":"Force To Top","text":"<p>Force specific imports to the top of their appropriate section.</p> <p>Type: List of Strings Default: <code>frozenset()</code> Config default: <code>[]</code> Python &amp; Config File Name: force_to_top CLI Flags:</p> <ul> <li>-t</li> <li>--top</li> </ul>"},{"location":"configuration/options/#skip","title":"Skip","text":"<p>Files that isort should skip over. If you want to skip multiple files you should specify twice: <code>--skip file1 --skip file2</code>. Values can be file names, directory names or file paths. To skip all files in a nested path, use <code>--skip-glob</code>. To even skip matching files that have been specified on the command line, use <code>--filter-files</code>.</p> <p>Type: List of Strings Default: <code>('.bzr', '.direnv', '.eggs', '.git', '.hg', '.mypy_cache', '.nox', '.pants.d', '.pytype' '.svn', '.tox', '.venv', '__pypackages__', '_build', 'buck-out', 'build', 'dist', 'node_modules', 'venv')</code> Config default: <code>['.bzr', '.direnv', '.eggs', '.git', '.hg', '.mypy_cache', '.nox', '.pants.d', '.svn', '.tox', '.venv', '__pypackages__', '_build', 'buck-out', 'build', 'dist', 'node_modules', 'venv']</code> Python &amp; Config File Name: skip CLI Flags:</p> <ul> <li>-s</li> <li>--skip</li> </ul> <p>Examples:</p>"},{"location":"configuration/options/#example-isortcfg_1","title":"Example <code>.isort.cfg</code>","text":"<pre><code>[settings]\nskip=.gitignore,.dockerignore\n</code></pre>"},{"location":"configuration/options/#example-pyprojecttoml_1","title":"Example <code>pyproject.toml</code>","text":"<pre><code>[tool.isort]\nskip = [\".gitignore\", \".dockerignore\"]\n</code></pre>"},{"location":"configuration/options/#extend-skip","title":"Extend Skip","text":"<p>Extends --skip to add additional files that isort should skip over. If you want to skip multiple files you should specify twice: --skip file1 --skip file2. Values can be file names, directory names or file paths. To skip all files in a nested path, use <code>--skip-glob</code>. To even skip matching files that have been specified on the command line, use <code>--filter-files</code>.</p> <p>Type: List of Strings Default: <code>frozenset()</code> Config default: <code>[]</code> Python &amp; Config File Name: extend_skip CLI Flags:</p> <ul> <li>--extend-skip</li> </ul> <p>Examples:</p>"},{"location":"configuration/options/#example-isortcfg_2","title":"Example <code>.isort.cfg</code>","text":"<pre><code>[settings]\nextend_skip=.md,.json\n</code></pre>"},{"location":"configuration/options/#example-pyprojecttoml_2","title":"Example <code>pyproject.toml</code>","text":"<pre><code>[tool.isort]\nextend_skip = [\".md\", \".json\"]\n</code></pre>"},{"location":"configuration/options/#skip-glob","title":"Skip Glob","text":"<p>Files that isort should skip over. To even skip matching files that have been specified on the command line, use <code>--filter-files</code>.</p> <p>Type: List of Strings Default: <code>frozenset()</code> Config default: <code>[]</code> Python &amp; Config File Name: skip_glob CLI Flags:</p> <ul> <li>--sg</li> <li>--skip-glob</li> </ul> <p>Examples:</p>"},{"location":"configuration/options/#example-isortcfg_3","title":"Example <code>.isort.cfg</code>","text":"<pre><code>[settings]\nskip_glob=docs/*\n</code></pre>"},{"location":"configuration/options/#example-pyprojecttoml_3","title":"Example <code>pyproject.toml</code>","text":"<pre><code>[tool.isort]\nskip_glob = [\"docs/*\"]\n</code></pre>"},{"location":"configuration/options/#extend-skip-glob","title":"Extend Skip Glob","text":"<p>Additional files that isort should skip over (extending --skip-glob). To even skip matching files that have been specified on the command line, use <code>--filter-files</code>.</p> <p>Type: List of Strings Default: <code>frozenset()</code> Config default: <code>[]</code> Python &amp; Config File Name: extend_skip_glob CLI Flags:</p> <ul> <li>--extend-skip-glob</li> </ul> <p>Examples:</p>"},{"location":"configuration/options/#example-isortcfg_4","title":"Example <code>.isort.cfg</code>","text":"<pre><code>[settings]\nextend_skip_glob=my_*_module.py,test/*\n</code></pre>"},{"location":"configuration/options/#example-pyprojecttoml_4","title":"Example <code>pyproject.toml</code>","text":"<pre><code>[tool.isort]\nextend_skip_glob = [\"my_*_module.py\", \"test/*\"]\n</code></pre>"},{"location":"configuration/options/#skip-gitignore","title":"Skip Gitignore","text":"<p>Treat project as a git repository and ignore files listed in .gitignore. To even skip matching files that have been specified on the command line, use <code>--filter-files</code>.</p> <p>NOTE: This requires git to be installed and accessible from the same shell as isort.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: skip_gitignore CLI Flags:</p> <ul> <li>--gitignore</li> <li>--skip-gitignore</li> </ul>"},{"location":"configuration/options/#line-length","title":"Line Length","text":"<p>The max length of an import line (used for wrapping long imports).</p> <p>Type: Int Default: <code>79</code> Config default: <code>79</code> Python &amp; Config File Name: line_length CLI Flags:</p> <ul> <li>-l</li> <li>-w</li> <li>--line-length</li> <li>--line-width</li> </ul>"},{"location":"configuration/options/#wrap-length","title":"Wrap Length","text":"<p>Specifies how long lines that are wrapped should be, if not set line_length is used. NOTE: wrap_length must be LOWER than or equal to line_length.</p> <p>Type: Int Default: <code>0</code> Config default: <code>0</code> Python &amp; Config File Name: wrap_length CLI Flags:</p> <ul> <li>--wl</li> <li>--wrap-length</li> </ul>"},{"location":"configuration/options/#line-ending","title":"Line Ending","text":"<p>Forces line endings to the specified value. If not set, values will be guessed per-file.</p> <p>Type: String Default: Config default: Python &amp; Config File Name: line_ending CLI Flags:</p> <ul> <li>--le</li> <li>--line-ending</li> </ul>"},{"location":"configuration/options/#sort-re-exports","title":"Sort Re-exports","text":"<p>Specifies whether to sort re-exports (<code>__all__</code> collections) automatically.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: sort_reexports CLI Flags:</p> <ul> <li>--srx</li> <li>--sort-reexports</li> </ul>"},{"location":"configuration/options/#sections","title":"Sections","text":"<p>What sections isort should display imports for and in what order</p> <p>Type: List of Strings Default: <code>('FUTURE', 'STDLIB', 'THIRDPARTY', 'FIRSTPARTY', 'LOCALFOLDER')</code> Config default: <code>['FUTURE', 'STDLIB', 'THIRDPARTY', 'FIRSTPARTY', 'LOCALFOLDER']</code> Python &amp; Config File Name: sections CLI Flags: Not Supported</p>"},{"location":"configuration/options/#no-sections","title":"No Sections","text":"<p>Put all imports into the same section bucket</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: no_sections CLI Flags:</p> <ul> <li>--ds</li> <li>--no-sections</li> </ul>"},{"location":"configuration/options/#known-future-library","title":"Known Future Library","text":"<p>Force isort to recognize a module as part of Python's internal future compatibility libraries. WARNING: this overrides the behavior of future handling and therefore can result in code that can't execute. If you're looking to add dependencies such as six, a better option is to create another section below --future using custom sections. See: https://github.com/PyCQA/isort#custom-sections-and-ordering and the discussion here: https://github.com/PyCQA/isort/issues/1463.</p> <p>Type: List of Strings Default: <code>('__future__',)</code> Config default: <code>['__future__']</code> Python &amp; Config File Name: known_future_library CLI Flags:</p> <ul> <li>-f</li> <li>--future</li> </ul>"},{"location":"configuration/options/#known-third-party","title":"Known Third Party","text":"<p>Force isort to recognize a module as being part of a third party library.</p> <p>Type: List of Strings Default: <code>frozenset()</code> Config default: <code>[]</code> Python &amp; Config File Name: known_third_party CLI Flags:</p> <ul> <li>-o</li> <li>--thirdparty</li> </ul> <p>Examples:</p>"},{"location":"configuration/options/#example-isortcfg_5","title":"Example <code>.isort.cfg</code>","text":"<pre><code>[settings]\nknown_third_party=my_module1,my_module2\n</code></pre>"},{"location":"configuration/options/#example-pyprojecttoml_5","title":"Example <code>pyproject.toml</code>","text":"<pre><code>[tool.isort]\nknown_third_party = [\"my_module1\", \"my_module2\"]\n</code></pre>"},{"location":"configuration/options/#known-first-party","title":"Known First Party","text":"<p>Force isort to recognize a module as being part of the current python project.</p> <p>Type: List of Strings Default: <code>frozenset()</code> Config default: <code>[]</code> Python &amp; Config File Name: known_first_party CLI Flags:</p> <ul> <li>-p</li> <li>--project</li> </ul> <p>Examples:</p>"},{"location":"configuration/options/#example-isortcfg_6","title":"Example <code>.isort.cfg</code>","text":"<pre><code>[settings]\nknown_first_party=my_module1,my_module2\n</code></pre>"},{"location":"configuration/options/#example-pyprojecttoml_6","title":"Example <code>pyproject.toml</code>","text":"<pre><code>[tool.isort]\nknown_first_party = [\"my_module1\", \"my_module2\"]\n</code></pre>"},{"location":"configuration/options/#known-local-folder","title":"Known Local Folder","text":"<p>Force isort to recognize a module as being a local folder. Generally, this is reserved for relative imports (from . import module).</p> <p>Type: List of Strings Default: <code>frozenset()</code> Config default: <code>[]</code> Python &amp; Config File Name: known_local_folder CLI Flags:</p> <ul> <li>--known-local-folder</li> </ul> <p>Examples:</p>"},{"location":"configuration/options/#example-isortcfg_7","title":"Example <code>.isort.cfg</code>","text":"<pre><code>[settings]\nknown_local_folder=my_module1,my_module2\n</code></pre>"},{"location":"configuration/options/#example-pyprojecttoml_7","title":"Example <code>pyproject.toml</code>","text":"<pre><code>[tool.isort]\nknown_local_folder = [\"my_module1\", \"my_module2\"]\n</code></pre>"},{"location":"configuration/options/#known-standard-library","title":"Known Standard Library","text":"<p>Force isort to recognize a module as part of Python's standard library.</p> <p>Type: List of Strings Default: <code>('_ast', '_dummy_thread', '_thread', 'abc', 'aifc', 'argparse', 'array', 'ast', 'asynchat', 'asyncio', 'asyncore', 'atexit', 'audioop', 'base64', 'bdb', 'binascii', 'binhex', 'bisect', 'builtins', 'bz2', 'cProfile', 'calendar', 'cgi', 'cgitb', 'chunk', 'cmath', 'cmd', 'code', 'codecs', 'codeop', 'collections', 'colorsys', 'compileall', 'concurrent', 'configparser', 'contextlib', 'contextvars', 'copy', 'copyreg', 'crypt', 'csv', 'ctypes', 'curses', 'dataclasses', 'datetime', 'dbm', 'decimal', 'difflib', 'dis', 'distutils', 'doctest', 'dummy_threading', 'email', 'encodings', 'ensurepip', 'enum', 'errno', 'faulthandler', 'fcntl', 'filecmp', 'fileinput', 'fnmatch', 'formatter', 'fpectl', 'fractions', 'ftplib', 'functools', 'gc', 'getopt', 'getpass', 'gettext', 'glob', 'graphlib', 'grp', 'gzip', 'hashlib', 'heapq', 'hmac', 'html', 'http', 'imaplib', 'imghdr', 'imp', 'importlib', 'inspect', 'io', 'ipaddress', 'itertools', 'json', 'keyword', 'lib2to3', 'linecache', 'locale', 'logging', 'lzma', 'macpath', 'mailbox', 'mailcap', 'marshal', 'math', 'mimetypes', 'mmap', 'modulefinder', 'msilib', 'msvcrt', 'multiprocessing', 'netrc', 'nis', 'nntplib', 'ntpath', 'numbers', 'operator', 'optparse', 'os', 'ossaudiodev', 'parser', 'pathlib', 'pdb', 'pickle', 'pickletools', 'pipes', 'pkgutil', 'platform', 'plistlib', 'poplib', 'posix', 'posixpath', 'pprint', 'profile', 'pstats', 'pty', 'pwd', 'py_compile', 'pyclbr', 'pydoc', 'queue', 'quopri', 'random', 're', 'readline', 'reprlib', 'resource', 'rlcompleter', 'runpy', 'sched', 'secrets', 'select', 'selectors', 'shelve', 'shlex', 'shutil', 'signal', 'site', 'smtpd', 'smtplib', 'sndhdr', 'socket', 'socketserver', 'spwd', 'sqlite3', 'sre', 'sre_compile', 'sre_constants', 'sre_parse', 'ssl', 'stat', 'statistics', 'string', 'stringprep', 'struct', 'subprocess', 'sunau', 'symbol', 'symtable', 'sys', 'sysconfig', 'syslog', 'tabnanny', 'tarfile', 'telnetlib', 'tempfile', 'termios', 'test', 'textwrap', 'threading', 'time', 'timeit', 'tkinter', 'token', 'tokenize', 'trace', 'traceback', 'tracemalloc', 'tty', 'turtle', 'turtledemo', 'types', 'typing', 'unicodedata', 'unittest', 'urllib', 'uu', 'uuid', 'venv', 'warnings', 'wave', 'weakref', 'webbrowser', 'winreg', 'winsound', 'wsgiref', 'xdrlib', 'xml', 'xmlrpc', 'zipapp', 'zipfile', 'zipimport', 'zlib', 'zoneinfo')</code> Config default: <code>['_ast', '_dummy_thread', '_thread', 'abc', 'aifc', 'argparse', 'array', 'ast', 'asynchat', 'asyncio', 'asyncore', 'atexit', 'audioop', 'base64', 'bdb', 'binascii', 'binhex', 'bisect', 'builtins', 'bz2', 'cProfile', 'calendar', 'cgi', 'cgitb', 'chunk', 'cmath', 'cmd', 'code', 'codecs', 'codeop', 'collections', 'colorsys', 'compileall', 'concurrent', 'configparser', 'contextlib', 'contextvars', 'copy', 'copyreg', 'crypt', 'csv', 'ctypes', 'curses', 'dataclasses', 'datetime', 'dbm', 'decimal', 'difflib', 'dis', 'distutils', 'doctest', 'dummy_threading', 'email', 'encodings', 'ensurepip', 'enum', 'errno', 'faulthandler', 'fcntl', 'filecmp', 'fileinput', 'fnmatch', 'formatter', 'fpectl', 'fractions', 'ftplib', 'functools', 'gc', 'getopt', 'getpass', 'gettext', 'glob', 'graphlib', 'grp', 'gzip', 'hashlib', 'heapq', 'hmac', 'html', 'http', 'imaplib', 'imghdr', 'imp', 'importlib', 'inspect', 'io', 'ipaddress', 'itertools', 'json', 'keyword', 'lib2to3', 'linecache', 'locale', 'logging', 'lzma', 'macpath', 'mailbox', 'mailcap', 'marshal', 'math', 'mimetypes', 'mmap', 'modulefinder', 'msilib', 'msvcrt', 'multiprocessing', 'netrc', 'nis', 'nntplib', 'ntpath', 'numbers', 'operator', 'optparse', 'os', 'ossaudiodev', 'parser', 'pathlib', 'pdb', 'pickle', 'pickletools', 'pipes', 'pkgutil', 'platform', 'plistlib', 'poplib', 'posix', 'posixpath', 'pprint', 'profile', 'pstats', 'pty', 'pwd', 'py_compile', 'pyclbr', 'pydoc', 'queue', 'quopri', 'random', 're', 'readline', 'reprlib', 'resource', 'rlcompleter', 'runpy', 'sched', 'secrets', 'select', 'selectors', 'shelve', 'shlex', 'shutil', 'signal', 'site', 'smtpd', 'smtplib', 'sndhdr', 'socket', 'socketserver', 'spwd', 'sqlite3', 'sre', 'sre_compile', 'sre_constants', 'sre_parse', 'ssl', 'stat', 'statistics', 'string', 'stringprep', 'struct', 'subprocess', 'sunau', 'symbol', 'symtable', 'sys', 'sysconfig', 'syslog', 'tabnanny', 'tarfile', 'telnetlib', 'tempfile', 'termios', 'test', 'textwrap', 'threading', 'time', 'timeit', 'tkinter', 'token', 'tokenize', 'trace', 'traceback', 'tracemalloc', 'tty', 'turtle', 'turtledemo', 'types', 'typing', 'unicodedata', 'unittest', 'urllib', 'uu', 'uuid', 'venv', 'warnings', 'wave', 'weakref', 'webbrowser', 'winreg', 'winsound', 'wsgiref', 'xdrlib', 'xml', 'xmlrpc', 'zipapp', 'zipfile', 'zipimport', 'zlib', 'zoneinfo']</code> Python &amp; Config File Name: known_standard_library CLI Flags:</p> <ul> <li>-b</li> <li>--builtin</li> </ul> <p>Examples:</p>"},{"location":"configuration/options/#example-isortcfg_8","title":"Example <code>.isort.cfg</code>","text":"<pre><code>[settings]\nknown_standard_library=my_module1,my_module2\n</code></pre>"},{"location":"configuration/options/#example-pyprojecttoml_8","title":"Example <code>pyproject.toml</code>","text":"<pre><code>[tool.isort]\nknown_standard_library = [\"my_module1\", \"my_module2\"]\n</code></pre>"},{"location":"configuration/options/#extra-standard-library","title":"Extra Standard Library","text":"<p>Extra modules to be included in the list of ones in Python's standard library.</p> <p>Type: List of Strings Default: <code>frozenset()</code> Config default: <code>[]</code> Python &amp; Config File Name: extra_standard_library CLI Flags:</p> <ul> <li>--extra-builtin</li> </ul> <p>Examples:</p>"},{"location":"configuration/options/#example-isortcfg_9","title":"Example <code>.isort.cfg</code>","text":"<pre><code>[settings]\nextra_standard_library=my_module1,my_module2\n</code></pre>"},{"location":"configuration/options/#example-pyprojecttoml_9","title":"Example <code>pyproject.toml</code>","text":"<pre><code>[tool.isort]\nextra_standard_library = [\"my_module1\", \"my_module2\"]\n</code></pre>"},{"location":"configuration/options/#known-other","title":"Known Other","text":"<p>known_OTHER is how imports of custom sections are defined. OTHER is a placeholder for the custom section name.</p> <p>Type: Dict Default: <code>{}</code> Config default: <code>{}</code> Python &amp; Config File Name: known_other CLI Flags: Not Supported</p> <p>Examples:</p>"},{"location":"configuration/options/#example-isortcfg_10","title":"Example <code>.isort.cfg</code>","text":"<pre><code>[settings]\nsections=FUTURE,STDLIB,THIRDPARTY,AIRFLOW,FIRSTPARTY,LOCALFOLDER\nknown_airflow=airflow\n</code></pre>"},{"location":"configuration/options/#example-pyprojecttoml_10","title":"Example <code>pyproject.toml</code>","text":"<pre><code>[tool.isort]\nsections = ['FUTURE', 'STDLIB', 'THIRDPARTY', 'AIRFLOW', 'FIRSTPARTY', 'LOCALFOLDER']\nknown_airflow = ['airflow']\n</code></pre>"},{"location":"configuration/options/#multi-line-output","title":"Multi Line Output","text":"<p>Multi line output (0-grid, 1-vertical, 2-hanging, 3-vert-hanging, 4-vert-grid, 5-vert-grid-grouped, 6-deprecated-alias-for-5, 7-noqa, 8-vertical-hanging-indent-bracket, 9-vertical-prefix-from-module-import, 10-hanging-indent-with-parentheses).</p> <p>Type: Wrapmodes Default: <code>WrapModes.GRID</code> Config default: <code>WrapModes.GRID</code> Python &amp; Config File Name: multi_line_output CLI Flags:</p> <ul> <li>-m</li> <li>--multi-line</li> </ul> <p>Examples:</p>"},{"location":"configuration/options/#example-isortcfg_11","title":"Example <code>.isort.cfg</code>","text":"<pre><code>[settings]\nmulti_line_output=3\n</code></pre>"},{"location":"configuration/options/#example-pyprojecttoml_11","title":"Example <code>pyproject.toml</code>","text":"<pre><code>[tool.isort]\nmulti_line_output = 3\n</code></pre>"},{"location":"configuration/options/#forced-separate","title":"Forced Separate","text":"<p>Force certain sub modules to show separately</p> <p>Type: List of Strings Default: <code>()</code> Config default: <code>[]</code> Python &amp; Config File Name: forced_separate CLI Flags: Not Supported</p> <p>Examples:</p>"},{"location":"configuration/options/#example-isortcfg_12","title":"Example <code>.isort.cfg</code>","text":"<pre><code>[settings]\nforced_separate=glob_exp1,glob_exp2\n</code></pre>"},{"location":"configuration/options/#example-pyprojecttoml_12","title":"Example <code>pyproject.toml</code>","text":"<pre><code>[tool.isort]\nforced_separate = [\"glob_exp1\", \"glob_exp2\"]\n</code></pre>"},{"location":"configuration/options/#indent","title":"Indent","text":"<p>String to place for indents defaults to \"    \" (4 spaces).</p> <p>Type: String Default: Config default: Python &amp; Config File Name: indent CLI Flags:</p> <ul> <li>-i</li> <li>--indent</li> </ul>"},{"location":"configuration/options/#comment-prefix","title":"Comment Prefix","text":"<p>Allows customizing how isort prefixes comments that it adds or modifies on import linesGenerally <code>#</code> (two spaces before a pound symbol) is use, though one space is also common.</p> <p>Type: String Default: <code>#</code> Config default: <code>#</code> Python &amp; Config File Name: comment_prefix CLI Flags: Not Supported</p>"},{"location":"configuration/options/#length-sort","title":"Length Sort","text":"<p>Sort imports by their string length.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: length_sort CLI Flags:</p> <ul> <li>--ls</li> <li>--length-sort</li> </ul>"},{"location":"configuration/options/#length-sort-straight","title":"Length Sort Straight","text":"<p>Sort straight imports by their string length. Similar to <code>length_sort</code> but applies only to straight imports and doesn't affect from imports.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: length_sort_straight CLI Flags:</p> <ul> <li>--lss</li> <li>--length-sort-straight</li> </ul>"},{"location":"configuration/options/#length-sort-sections","title":"Length Sort Sections","text":"<p>Sort the given sections by length</p> <p>Type: List of Strings Default: <code>frozenset()</code> Config default: <code>[]</code> Python &amp; Config File Name: length_sort_sections CLI Flags: Not Supported</p> <p>Examples:</p>"},{"location":"configuration/options/#example-isortcfg_13","title":"Example <code>.isort.cfg</code>","text":"<pre><code>[settings]\nlength_sort_sections=future,stdlib\n</code></pre>"},{"location":"configuration/options/#example-pyprojecttoml_13","title":"Example <code>pyproject.toml</code>","text":"<pre><code>[tool.isort]\nlength_sort_sections = [\"future\", \"stdlib\"]\n</code></pre>"},{"location":"configuration/options/#add-imports","title":"Add Imports","text":"<p>Adds the specified import line to all files, automatically determining correct placement.</p> <p>Type: List of Strings Default: <code>frozenset()</code> Config default: <code>[]</code> Python &amp; Config File Name: add_imports CLI Flags:</p> <ul> <li>-a</li> <li>--add-import</li> </ul> <p>Examples:</p>"},{"location":"configuration/options/#example-isortcfg_14","title":"Example <code>.isort.cfg</code>","text":"<pre><code>[settings]\nadd_imports=import os,import json\n</code></pre>"},{"location":"configuration/options/#example-pyprojecttoml_14","title":"Example <code>pyproject.toml</code>","text":"<pre><code>[tool.isort]\nadd_imports = [\"import os\", \"import json\"]\n</code></pre>"},{"location":"configuration/options/#remove-imports","title":"Remove Imports","text":"<p>Removes the specified import from all files.</p> <p>Type: List of Strings Default: <code>frozenset()</code> Config default: <code>[]</code> Python &amp; Config File Name: remove_imports CLI Flags:</p> <ul> <li>--rm</li> <li>--remove-import</li> </ul> <p>Examples:</p>"},{"location":"configuration/options/#example-isortcfg_15","title":"Example <code>.isort.cfg</code>","text":"<pre><code>[settings]\nremove_imports=os,json\n</code></pre>"},{"location":"configuration/options/#example-pyprojecttoml_15","title":"Example <code>pyproject.toml</code>","text":"<pre><code>[tool.isort]\nremove_imports = [\"os\", \"json\"]\n</code></pre>"},{"location":"configuration/options/#append-only","title":"Append Only","text":"<p>Only adds the imports specified in --add-import if the file contains existing imports.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: append_only CLI Flags:</p> <ul> <li>--append</li> <li>--append-only</li> </ul>"},{"location":"configuration/options/#reverse-relative","title":"Reverse Relative","text":"<p>Reverse order of relative imports.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: reverse_relative CLI Flags:</p> <ul> <li>--rr</li> <li>--reverse-relative</li> </ul>"},{"location":"configuration/options/#force-single-line","title":"Force Single Line","text":"<p>Forces all from imports to appear on their own line</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: force_single_line CLI Flags:</p> <ul> <li>--sl</li> <li>--force-single-line-imports</li> </ul>"},{"location":"configuration/options/#single-line-exclusions","title":"Single Line Exclusions","text":"<p>One or more modules to exclude from the single line rule.</p> <p>Type: List of Strings Default: <code>()</code> Config default: <code>[]</code> Python &amp; Config File Name: single_line_exclusions CLI Flags:</p> <ul> <li>--nsl</li> <li>--single-line-exclusions</li> </ul> <p>Examples:</p>"},{"location":"configuration/options/#example-isortcfg_16","title":"Example <code>.isort.cfg</code>","text":"<pre><code>[settings]\nsingle_line_exclusions=os,json\n</code></pre>"},{"location":"configuration/options/#example-pyprojecttoml_16","title":"Example <code>pyproject.toml</code>","text":"<pre><code>[tool.isort]\nsingle_line_exclusions = [\"os\", \"json\"]\n</code></pre>"},{"location":"configuration/options/#default-section","title":"Default Section","text":"<p>Sets the default section for import options: ('FUTURE', 'STDLIB', 'THIRDPARTY', 'FIRSTPARTY', 'LOCALFOLDER')</p> <p>Type: String Default: <code>THIRDPARTY</code> Config default: <code>THIRDPARTY</code> Python &amp; Config File Name: default_section CLI Flags:</p> <ul> <li>--sd</li> <li>--section-default</li> </ul>"},{"location":"configuration/options/#import-headings","title":"Import Headings","text":"<p>A mapping of import sections to import heading comments that should show above them.</p> <p>Type: Dict Default: <code>{}</code> Config default: <code>{}</code> Python &amp; Config File Name: import_headings CLI Flags: Not Supported</p>"},{"location":"configuration/options/#import-footers","title":"Import Footers","text":"<p>A mapping of import sections to import footer comments that should show below them.</p> <p>Type: Dict Default: <code>{}</code> Config default: <code>{}</code> Python &amp; Config File Name: import_footers CLI Flags: Not Supported</p>"},{"location":"configuration/options/#balanced-wrapping","title":"Balanced Wrapping","text":"<p>Balances wrapping to produce the most consistent line length possible</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: balanced_wrapping CLI Flags:</p> <ul> <li>-e</li> <li>--balanced</li> </ul>"},{"location":"configuration/options/#use-parentheses","title":"Use Parentheses","text":"<p>Use parentheses for line continuation on length limit instead of backslashes. NOTE: This is separate from wrap modes, and only affects how individual lines that  are too long get continued, not sections of multiple imports.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: use_parentheses CLI Flags:</p> <ul> <li>--up</li> <li>--use-parentheses</li> </ul>"},{"location":"configuration/options/#order-by-type","title":"Order By Type","text":"<p>Order imports by type, which is determined by case, in addition to alphabetically.</p> <p>NOTE: type here refers to the implied type from the import name capitalization.  isort does not do type introspection for the imports. These \"types\" are simply: CONSTANT_VARIABLE, CamelCaseClass, variable_or_function. If your project follows PEP8 or a related coding standard and has many imports this is a good default, otherwise you likely will want to turn it off. From the CLI the <code>--dont-order-by-type</code> option will turn this off.</p> <p>Type: Bool Default: <code>True</code> Config default: <code>true</code> Python &amp; Config File Name: order_by_type CLI Flags:</p> <ul> <li>--ot</li> <li>--order-by-type</li> </ul>"},{"location":"configuration/options/#atomic","title":"Atomic","text":"<p>Ensures the output doesn't save if the resulting file contains syntax errors.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: atomic CLI Flags:</p> <ul> <li>--ac</li> <li>--atomic</li> </ul>"},{"location":"configuration/options/#lines-before-imports","title":"Lines Before Imports","text":"<p>The number of blank lines to place before imports. -1 for automatic determination</p> <p>Type: Int Default: <code>-1</code> Config default: <code>-1</code> Python &amp; Config File Name: lines_before_imports CLI Flags:</p> <ul> <li>--lbi</li> <li>--lines-before-imports</li> </ul>"},{"location":"configuration/options/#lines-after-imports","title":"Lines After Imports","text":"<p>The number of blank lines to place after imports. -1 for automatic determination</p> <p>Type: Int Default: <code>-1</code> Config default: <code>-1</code> Python &amp; Config File Name: lines_after_imports CLI Flags:</p> <ul> <li>--lai</li> <li>--lines-after-imports</li> </ul>"},{"location":"configuration/options/#lines-between-sections","title":"Lines Between Sections","text":"<p>The number of lines to place between sections</p> <p>Type: Int Default: <code>1</code> Config default: <code>1</code> Python &amp; Config File Name: lines_between_sections CLI Flags: Not Supported</p>"},{"location":"configuration/options/#lines-between-types","title":"Lines Between Types","text":"<p>The number of lines to place between direct and from imports</p> <p>Type: Int Default: <code>0</code> Config default: <code>0</code> Python &amp; Config File Name: lines_between_types CLI Flags:</p> <ul> <li>--lbt</li> <li>--lines-between-types</li> </ul>"},{"location":"configuration/options/#combine-as-imports","title":"Combine As Imports","text":"<p>Combines as imports on the same line.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: combine_as_imports CLI Flags:</p> <ul> <li>--ca</li> <li>--combine-as</li> </ul>"},{"location":"configuration/options/#combine-star","title":"Combine Star","text":"<p>Ensures that if a star import is present, nothing else is imported from that namespace.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: combine_star CLI Flags:</p> <ul> <li>--cs</li> <li>--combine-star</li> </ul>"},{"location":"configuration/options/#include-trailing-comma","title":"Include Trailing Comma","text":"<p>Includes a trailing comma on multi line imports that include parentheses.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: include_trailing_comma CLI Flags:</p> <ul> <li>--tc</li> <li>--trailing-comma</li> </ul>"},{"location":"configuration/options/#split-on-trailing-comma","title":"Split on Trailing Comma","text":"<p>Split imports list followed by a trailing comma into VERTICAL_HANGING_INDENT mode. This follows Black style magic comma.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: split_on_trailing_comma CLI Flags:</p> <ul> <li>--split-on-trailing-comma</li> </ul>"},{"location":"configuration/options/#from-first","title":"From First","text":"<p>Switches the typical ordering preference, showing from imports first then straight ones.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: from_first CLI Flags:</p> <ul> <li>--ff</li> <li>--from-first</li> </ul>"},{"location":"configuration/options/#verbose","title":"Verbose","text":"<p>Shows verbose output, such as when files are skipped or when a check is successful.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: verbose CLI Flags:</p> <ul> <li>-v</li> <li>--verbose</li> </ul>"},{"location":"configuration/options/#quiet","title":"Quiet","text":"<p>Shows extra quiet output, only errors are outputted.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: quiet CLI Flags:</p> <ul> <li>-q</li> <li>--quiet</li> </ul>"},{"location":"configuration/options/#force-adds","title":"Force Adds","text":"<p>Forces import adds even if the original file is empty.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: force_adds CLI Flags:</p> <ul> <li>--af</li> <li>--force-adds</li> </ul>"},{"location":"configuration/options/#force-alphabetical-sort-within-sections","title":"Force Alphabetical Sort Within Sections","text":"<p>Force all imports to be sorted alphabetically within a section</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: force_alphabetical_sort_within_sections CLI Flags:</p> <ul> <li>--fass</li> <li>--force-alphabetical-sort-within-sections</li> </ul>"},{"location":"configuration/options/#force-alphabetical-sort","title":"Force Alphabetical Sort","text":"<p>Force all imports to be sorted as a single section</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: force_alphabetical_sort CLI Flags:</p> <ul> <li>--fas</li> <li>--force-alphabetical-sort</li> </ul>"},{"location":"configuration/options/#force-grid-wrap","title":"Force Grid Wrap","text":"<p>Force number of from imports (defaults to 2 when passed as CLI flag without value) to be grid wrapped regardless of line length. If 0 is passed in (the global default) only line length is considered.</p> <p>Type: Int Default: <code>0</code> Config default: <code>0</code> Python &amp; Config File Name: force_grid_wrap CLI Flags:</p> <ul> <li>--fgw</li> <li>--force-grid-wrap</li> </ul>"},{"location":"configuration/options/#force-sort-within-sections","title":"Force Sort Within Sections","text":"<p>Don't sort straight-style imports (like import sys) before from-style imports (like from itertools import groupby). Instead, sort the imports by module, independent of import style.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: force_sort_within_sections CLI Flags:</p> <ul> <li>--fss</li> <li>--force-sort-within-sections</li> </ul>"},{"location":"configuration/options/#lexicographical","title":"Lexicographical","text":"<p>Lexicographical order is strictly alphabetical order. For example by default isort will sort <code>1, 10, 2</code> into <code>1, 2, 10</code> - but with lexicographical sorting enabled it will remain <code>1, 10, 2</code>.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: lexicographical CLI Flags: Not Supported</p>"},{"location":"configuration/options/#group-by-package","title":"Group By Package","text":"<p>If <code>True</code> isort will automatically create section groups by the top-level package they come from.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: group_by_package CLI Flags: Not Supported</p>"},{"location":"configuration/options/#ignore-whitespace","title":"Ignore Whitespace","text":"<p>Tells isort to ignore whitespace differences when --check-only is being used.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: ignore_whitespace CLI Flags:</p> <ul> <li>--ws</li> <li>--ignore-whitespace</li> </ul>"},{"location":"configuration/options/#no-lines-before","title":"No Lines Before","text":"<p>Sections which should not be split with previous by empty lines</p> <p>Type: List of Strings Default: <code>frozenset()</code> Config default: <code>[]</code> Python &amp; Config File Name: no_lines_before CLI Flags:</p> <ul> <li>--nlb</li> <li>--no-lines-before</li> </ul> <p>Examples:</p>"},{"location":"configuration/options/#example-isortcfg_17","title":"Example <code>.isort.cfg</code>","text":"<pre><code>[settings]\nno_lines_before=future,stdlib\n</code></pre>"},{"location":"configuration/options/#example-pyprojecttoml_17","title":"Example <code>pyproject.toml</code>","text":"<pre><code>[tool.isort]\nno_lines_before = [\"future\", \"stdlib\"]\n</code></pre>"},{"location":"configuration/options/#no-inline-sort","title":"No Inline Sort","text":"<p>Leaves <code>from</code> imports with multiple imports 'as-is' (e.g. <code>from foo import a, c ,b</code>).</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: no_inline_sort CLI Flags:</p> <ul> <li>--nis</li> <li>--no-inline-sort</li> </ul>"},{"location":"configuration/options/#ignore-comments","title":"Ignore Comments","text":"<p>If enabled, isort will strip comments that exist within import lines.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: ignore_comments CLI Flags: Not Supported</p>"},{"location":"configuration/options/#case-sensitive","title":"Case Sensitive","text":"<p>Tells isort to include casing when sorting module names</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: case_sensitive CLI Flags:</p> <ul> <li>--case-sensitive</li> </ul>"},{"location":"configuration/options/#virtual-env","title":"Virtual Env","text":"<p>Virtual environment to use for determining whether a package is third-party</p> <p>Type: String Default: Config default: Python &amp; Config File Name: virtual_env CLI Flags:</p> <ul> <li>--virtual-env</li> </ul>"},{"location":"configuration/options/#conda-env","title":"Conda Env","text":"<p>Conda environment to use for determining whether a package is third-party</p> <p>Type: String Default: Config default: Python &amp; Config File Name: conda_env CLI Flags:</p> <ul> <li>--conda-env</li> </ul>"},{"location":"configuration/options/#ensure-newline-before-comments","title":"Ensure Newline Before Comments","text":"<p>Inserts a blank line before a comment following an import.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: ensure_newline_before_comments CLI Flags:</p> <ul> <li>-n</li> <li>--ensure-newline-before-comments</li> </ul>"},{"location":"configuration/options/#profile","title":"Profile","text":"<p>Base profile type to use for configuration. Profiles include: black, django, pycharm, google, open_stack, plone, attrs, hug, wemake, appnexus. As well as any shared profiles.</p> <p>Type: String Default: Config default: Python &amp; Config File Name: profile CLI Flags:</p> <ul> <li>--profile</li> </ul>"},{"location":"configuration/options/#honor-noqa","title":"Honor Noqa","text":"<p>Tells isort to honor noqa comments to enforce skipping those comments.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: honor_noqa CLI Flags:</p> <ul> <li>--honor-noqa</li> </ul>"},{"location":"configuration/options/#src-paths","title":"Src Paths","text":"<p>Add an explicitly defined source path (modules within src paths have their imports automatically categorized as first_party). Glob expansion (<code>*</code> and <code>**</code>) is supported for this option.</p> <p>Type: List of Strings Default: <code>()</code> Config default: <code>[]</code> Python &amp; Config File Name: src_paths CLI Flags:</p> <ul> <li>--src</li> <li>--src-path</li> </ul> <p>Examples:</p>"},{"location":"configuration/options/#example-isortcfg_18","title":"Example <code>.isort.cfg</code>","text":"<pre><code>[settings]\nsrc_paths = src,tests\n</code></pre>"},{"location":"configuration/options/#example-pyprojecttoml_18","title":"Example <code>pyproject.toml</code>","text":"<pre><code>[tool.isort]\nsrc_paths = [\"src\", \"tests\"]\n</code></pre>"},{"location":"configuration/options/#old-finders","title":"Old Finders","text":"<p>Use the old deprecated finder logic that relies on environment introspection magic.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: old_finders CLI Flags:</p> <ul> <li>--old-finders</li> <li>--magic-placement</li> </ul>"},{"location":"configuration/options/#remove-redundant-aliases","title":"Remove Redundant Aliases","text":"<p>Tells isort to remove redundant aliases from imports, such as <code>import os as os</code>. This defaults to <code>False</code> simply because some projects use these seemingly useless  aliases to signify intent and change behaviour.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: remove_redundant_aliases CLI Flags:</p> <ul> <li>--remove-redundant-aliases</li> </ul>"},{"location":"configuration/options/#float-to-top","title":"Float To Top","text":"<p>Causes all non-indented imports to float to the top of the file having its imports sorted (immediately below the top of file comment). This can be an excellent shortcut for collecting imports every once in a while when you place them in the middle of a file to avoid context switching.</p> <p>NOTE: It currently doesn't work with cimports and introduces some extra over-head and a performance penalty.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: float_to_top CLI Flags:</p> <ul> <li>--float-to-top</li> </ul>"},{"location":"configuration/options/#filter-files","title":"Filter Files","text":"<p>Tells isort to filter files even when they are explicitly passed in as part of the CLI command.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: filter_files CLI Flags:</p> <ul> <li>--filter-files</li> </ul>"},{"location":"configuration/options/#formatter","title":"Formatter","text":"<p>Specifies the name of a formatting plugin to use when producing output.</p> <p>Type: String Default: Config default: Python &amp; Config File Name: formatter CLI Flags:</p> <ul> <li>--formatter</li> </ul>"},{"location":"configuration/options/#formatting-function","title":"Formatting Function","text":"<p>The fully qualified Python path of a function to apply to format code sorted by isort.</p> <p>Type: Nonetype Default: <code>None</code> Config default: <code></code> Python &amp; Config File Name: formatting_function CLI Flags: Not Supported</p>"},{"location":"configuration/options/#color-output","title":"Color Output","text":"<p>Tells isort to use color in terminal output.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: color_output CLI Flags:</p> <ul> <li>--color</li> </ul>"},{"location":"configuration/options/#treat-comments-as-code","title":"Treat Comments As Code","text":"<p>Tells isort to treat the specified single line comment(s) as if they are code.</p> <p>Type: List of Strings Default: <code>frozenset()</code> Config default: <code>[]</code> Python &amp; Config File Name: treat_comments_as_code CLI Flags:</p> <ul> <li>--treat-comment-as-code</li> </ul> <p>Examples:</p>"},{"location":"configuration/options/#example-isortcfg_19","title":"Example <code>.isort.cfg</code>","text":"<pre><code>[settings]\ntreat_comments_as_code = # my comment 1, # my other comment\n</code></pre>"},{"location":"configuration/options/#example-pyprojecttoml_19","title":"Example <code>pyproject.toml</code>","text":"<pre><code>[tool.isort]\ntreat_comments_as_code = [\"# my comment 1\", \"# my other comment\"]\n</code></pre>"},{"location":"configuration/options/#treat-all-comments-as-code","title":"Treat All Comments As Code","text":"<p>Tells isort to treat all single line comments as if they are code.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: treat_all_comments_as_code CLI Flags:</p> <ul> <li>--treat-all-comment-as-code</li> </ul>"},{"location":"configuration/options/#supported-extensions","title":"Supported Extensions","text":"<p>Specifies what extensions isort can be run against.</p> <p>Type: List of Strings Default: <code>('pxd', 'py', 'pyi', 'pyx')</code> Config default: <code>['pxd', 'py', 'pyi', 'pyx']</code> Python &amp; Config File Name: supported_extensions CLI Flags:</p> <ul> <li>--ext</li> <li>--extension</li> <li>--supported-extension</li> </ul> <p>Examples:</p>"},{"location":"configuration/options/#example-isortcfg_20","title":"Example <code>.isort.cfg</code>","text":"<pre><code>[settings]\nsupported_extensions=pyw,ext\n</code></pre>"},{"location":"configuration/options/#example-pyprojecttoml_20","title":"Example <code>pyproject.toml</code>","text":"<pre><code>[tool.isort]\nsupported_extensions = [\"pyw\", \"ext\"]\n</code></pre>"},{"location":"configuration/options/#blocked-extensions","title":"Blocked Extensions","text":"<p>Specifies what extensions isort can never be run against.</p> <p>Type: List of Strings Default: <code>('pex',)</code> Config default: <code>['pex']</code> Python &amp; Config File Name: blocked_extensions CLI Flags:</p> <ul> <li>--blocked-extension</li> </ul> <p>Examples:</p>"},{"location":"configuration/options/#example-isortcfg_21","title":"Example <code>.isort.cfg</code>","text":"<pre><code>[settings]\nblocked_extensions=pyw,pyc\n</code></pre>"},{"location":"configuration/options/#example-pyprojecttoml_21","title":"Example <code>pyproject.toml</code>","text":"<pre><code>[tool.isort]\nblocked_extensions = [\"pyw\", \"pyc\"]\n</code></pre>"},{"location":"configuration/options/#constants","title":"Constants","text":"<p>An override list of tokens to always recognize as a CONSTANT for order_by_type regardless of casing.</p> <p>Type: List of Strings Default: <code>frozenset()</code> Config default: <code>[]</code> Python &amp; Config File Name: constants CLI Flags: Not Supported</p>"},{"location":"configuration/options/#classes","title":"Classes","text":"<p>An override list of tokens to always recognize as a Class for order_by_type regardless of casing.</p> <p>Type: List of Strings Default: <code>frozenset()</code> Config default: <code>[]</code> Python &amp; Config File Name: classes CLI Flags: Not Supported</p>"},{"location":"configuration/options/#variables","title":"Variables","text":"<p>An override list of tokens to always recognize as a var for order_by_type regardless of casing.</p> <p>Type: List of Strings Default: <code>frozenset()</code> Config default: <code>[]</code> Python &amp; Config File Name: variables CLI Flags: Not Supported</p>"},{"location":"configuration/options/#dedup-headings","title":"Dedup Headings","text":"<p>Tells isort to only show an identical custom import heading comment once, even if there are multiple sections with the comment set.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: dedup_headings CLI Flags:</p> <ul> <li>--dedup-headings</li> </ul>"},{"location":"configuration/options/#only-sections","title":"Only Sections","text":"<p>Causes imports to be sorted based on their sections like STDLIB, THIRDPARTY, etc. Within sections, the imports are ordered by their import style and the imports with the same style maintain their relative positions.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: only_sections CLI Flags:</p> <ul> <li>--only-sections</li> <li>--os</li> </ul>"},{"location":"configuration/options/#only-modified","title":"Only Modified","text":"<p>Suppresses verbose output for non-modified files.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: only_modified CLI Flags:</p> <ul> <li>--only-modified</li> <li>--om</li> </ul>"},{"location":"configuration/options/#combine-straight-imports","title":"Combine Straight Imports","text":"<p>Combines all the bare straight imports of the same section in a single line. Won't work with sections which have 'as' imports</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: combine_straight_imports CLI Flags:</p> <ul> <li>--combine-straight-imports</li> <li>--csi</li> </ul>"},{"location":"configuration/options/#auto-identify-namespace-packages","title":"Auto Identify Namespace Packages","text":"<p>Automatically determine local namespace packages, generally by lack of any src files before a src containing directory.</p> <p>Type: Bool Default: <code>True</code> Config default: <code>true</code> Python &amp; Config File Name: auto_identify_namespace_packages CLI Flags: Not Supported</p>"},{"location":"configuration/options/#namespace-packages","title":"Namespace Packages","text":"<p>Manually specify one or more namespace packages.</p> <p>Type: List of Strings Default: <code>frozenset()</code> Config default: <code>[]</code> Python &amp; Config File Name: namespace_packages CLI Flags: Not Supported</p>"},{"location":"configuration/options/#follow-links","title":"Follow Links","text":"<p>If <code>True</code> isort will follow symbolic links when doing recursive sorting.</p> <p>Type: Bool Default: <code>True</code> Config default: <code>true</code> Python &amp; Config File Name: follow_links CLI Flags: Not Supported</p>"},{"location":"configuration/options/#indented-import-headings","title":"Indented Import Headings","text":"<p>If <code>True</code> isort will apply import headings to indented imports the same way it does unindented ones.</p> <p>Type: Bool Default: <code>True</code> Config default: <code>true</code> Python &amp; Config File Name: indented_import_headings CLI Flags: Not Supported</p>"},{"location":"configuration/options/#honor-case-in-force-sorted-sections","title":"Honor Case In Force Sorted Sections","text":"<p>Honor <code>--case-sensitive</code> when <code>--force-sort-within-sections</code> is being used. Without this option set, <code>--order-by-type</code> decides module name ordering too.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: honor_case_in_force_sorted_sections CLI Flags:</p> <ul> <li>--hcss</li> <li>--honor-case-in-force-sorted-sections</li> </ul>"},{"location":"configuration/options/#sort-relative-in-force-sorted-sections","title":"Sort Relative In Force Sorted Sections","text":"<p>When using <code>--force-sort-within-sections</code>, sort relative imports the same way as they are sorted when not using that setting.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: sort_relative_in_force_sorted_sections CLI Flags:</p> <ul> <li>--srss</li> <li>--sort-relative-in-force-sorted-sections</li> </ul>"},{"location":"configuration/options/#overwrite-in-place","title":"Overwrite In Place","text":"<p>Tells isort to overwrite in place using the same file handle. Comes at a performance and memory usage penalty over its standard approach but ensures all file flags and modes stay unchanged.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: overwrite_in_place CLI Flags:</p> <ul> <li>--overwrite-in-place</li> </ul>"},{"location":"configuration/options/#reverse-sort","title":"Reverse Sort","text":"<p>Reverses the ordering of imports.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: reverse_sort CLI Flags:</p> <ul> <li>--reverse-sort</li> </ul>"},{"location":"configuration/options/#star-first","title":"Star First","text":"<p>Forces star imports above others to avoid overriding directly imported variables.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: star_first CLI Flags:</p> <ul> <li>--star-first</li> </ul>"},{"location":"configuration/options/#git-ignore","title":"Git Ignore","text":"<p>If <code>True</code> isort will honor ignores within locally defined .git_ignore files.</p> <p>Type: Dict Default: <code>{}</code> Config default: <code>{}</code> Python &amp; Config File Name: git_ignore CLI Flags: Not Supported</p>"},{"location":"configuration/options/#format-error","title":"Format Error","text":"<p>Override the format used to print errors.</p> <p>Type: String Default: <code>{error}: {message}</code> Config default: <code>{error}: {message}</code> Python &amp; Config File Name: format_error CLI Flags:</p> <ul> <li>--format-error</li> </ul>"},{"location":"configuration/options/#format-success","title":"Format Success","text":"<p>Override the format used to print success.</p> <p>Type: String Default: <code>{success}: {message}</code> Config default: <code>{success}: {message}</code> Python &amp; Config File Name: format_success CLI Flags:</p> <ul> <li>--format-success</li> </ul>"},{"location":"configuration/options/#sort-order","title":"Sort Order","text":"<p>Specify sorting function. Can be built in (natural[default] = force numbers to be sequential, native = Python's built-in sorted function) or an installable plugin.</p> <p>Type: String Default: <code>natural</code> Config default: <code>natural</code> Python &amp; Config File Name: sort_order CLI Flags:</p> <ul> <li>--sort-order</li> </ul>"},{"location":"configuration/options/#show-version","title":"Show Version","text":"<p>Displays the currently installed version of isort.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: Not Supported CLI Flags:</p> <ul> <li>-V</li> <li>--version</li> </ul> <p>Examples:</p>"},{"location":"configuration/options/#example-cli-usage_1","title":"Example cli usage","text":"<p><code>isort --version</code></p>"},{"location":"configuration/options/#version-number","title":"Version Number","text":"<p>Returns just the current version number without the logo</p> <p>Type: String Default: <code>==SUPPRESS==</code> Config default: <code>==SUPPRESS==</code> Python &amp; Config File Name: Not Supported CLI Flags:</p> <ul> <li>--vn</li> <li>--version-number</li> </ul>"},{"location":"configuration/options/#write-to-stdout","title":"Write To Stdout","text":"<p>Force resulting output to stdout, instead of in-place.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: Not Supported CLI Flags:</p> <ul> <li>-d</li> <li>--stdout</li> </ul>"},{"location":"configuration/options/#show-config","title":"Show Config","text":"<p>See isort's determined config, as well as sources of config options.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: Not Supported CLI Flags:</p> <ul> <li>--show-config</li> </ul>"},{"location":"configuration/options/#show-files","title":"Show Files","text":"<p>See the files isort will be run against with the current config options.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: Not Supported CLI Flags:</p> <ul> <li>--show-files</li> </ul>"},{"location":"configuration/options/#show-diff","title":"Show Diff","text":"<p>Prints a diff of all the changes isort would make to a file, instead of changing it in place</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: Not Supported CLI Flags:</p> <ul> <li>--df</li> <li>--diff</li> </ul>"},{"location":"configuration/options/#check","title":"Check","text":"<p>Checks the file for unsorted / unformatted imports and prints them to the command line without modifying the file. Returns 0 when nothing would change and returns 1 when the file would be reformatted.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: Not Supported CLI Flags:</p> <ul> <li>-c</li> <li>--check-only</li> <li>--check</li> </ul>"},{"location":"configuration/options/#settings-path","title":"Settings Path","text":"<p>Explicitly set the settings path or file instead of auto determining based on file location.</p> <p>Type: String Default: <code>None</code> Config default: <code></code> Python &amp; Config File Name: Not Supported CLI Flags:</p> <ul> <li>--sp</li> <li>--settings-path</li> <li>--settings-file</li> <li>--settings</li> </ul>"},{"location":"configuration/options/#config-root","title":"Config Root","text":"<p>Explicitly set the config root for resolving all configs. When used with the --resolve-all-configs flag, isort will look at all sub-folders in this config root to resolve config files and sort files based on the closest available config(if any)</p> <p>Type: String Default: <code>None</code> Config default: <code></code> Python &amp; Config File Name: Not Supported CLI Flags:</p> <ul> <li>--cr</li> <li>--config-root</li> </ul>"},{"location":"configuration/options/#resolve-all-configs","title":"Resolve All Configs","text":"<p>Tells isort to resolve the configs for all sub-directories and sort files in terms of its closest config files.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: Not Supported CLI Flags:</p> <ul> <li>--resolve-all-configs</li> </ul>"},{"location":"configuration/options/#jobs","title":"Jobs","text":"<p>Number of files to process in parallel. Negative value means use number of CPUs.</p> <p>Type: Int Default: <code>None</code> Config default: <code></code> Python &amp; Config File Name: Not Supported CLI Flags:</p> <ul> <li>-j</li> <li>--jobs</li> </ul>"},{"location":"configuration/options/#ask-to-apply","title":"Ask To Apply","text":"<p>Tells isort to apply changes interactively.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: Not Supported CLI Flags:</p> <ul> <li>--interactive</li> </ul>"},{"location":"configuration/options/#files","title":"Files","text":"<p>One or more Python source files that need their imports sorted.</p> <p>Type: String Default: <code>None</code> Config default: <code></code> Python &amp; Config File Name: Not Supported CLI Flags:</p>"},{"location":"configuration/options/#dont-follow-links","title":"Dont Follow Links","text":"<p>Tells isort not to follow symlinks that are encountered when running recursively.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: Not Supported CLI Flags:</p> <ul> <li>--dont-follow-links</li> </ul>"},{"location":"configuration/options/#filename","title":"Filename","text":"<p>Provide the filename associated with a stream.</p> <p>Type: String Default: <code>None</code> Config default: <code></code> Python &amp; Config File Name: Not Supported CLI Flags:</p> <ul> <li>--filename</li> </ul>"},{"location":"configuration/options/#allow-root","title":"Allow Root","text":"<p>Tells isort not to treat / specially, allowing it to be run against the root dir.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: Not Supported CLI Flags:</p> <ul> <li>--allow-root</li> </ul>"},{"location":"configuration/options/#dont-float-to-top","title":"Dont Float To Top","text":"<p>Forces --float-to-top setting off. See --float-to-top for more information.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: Not Supported CLI Flags:</p> <ul> <li>--dont-float-to-top</li> </ul>"},{"location":"configuration/options/#dont-order-by-type","title":"Dont Order By Type","text":"<p>Don't order imports by type, which is determined by case, in addition to alphabetically.</p> <p>NOTE: type here refers to the implied type from the import name capitalization.  isort does not do type introspection for the imports. These \"types\" are simply: CONSTANT_VARIABLE, CamelCaseClass, variable_or_function. If your project follows PEP8 or a related coding standard and has many imports this is a good default. You can turn this on from the CLI using <code>--order-by-type</code>.</p> <p>Type: Bool Default: <code>False</code> Config default: <code>false</code> Python &amp; Config File Name: Not Supported CLI Flags:</p> <ul> <li>--dt</li> <li>--dont-order-by-type</li> </ul>"},{"location":"configuration/options/#ext-format","title":"Ext Format","text":"<p>Tells isort to format the given files according to an extensions formatting rules.</p> <p>Type: String Default: <code>None</code> Config default: <code></code> Python &amp; Config File Name: Not Supported CLI Flags:</p> <ul> <li>--ext-format</li> </ul>"},{"location":"configuration/options/#deprecated-flags","title":"Deprecated Flags","text":"<p>==SUPPRESS==</p> <p>Type: String Default: <code>None</code> Config default: <code></code> Python &amp; Config File Name: Not Supported CLI Flags:</p> <ul> <li>-k</li> <li>--keep-direct-and-as</li> </ul>"},{"location":"configuration/pre-commit/","title":"Using isort with pre-commit","text":"<p>isort provides official support for pre-commit.</p>"},{"location":"configuration/pre-commit/#isort-pre-commit-step","title":"isort pre-commit step","text":"<p>To use isort's official pre-commit integration add the following config:</p> <pre><code>  - repo: https://github.com/pycqa/isort\n    rev: 5.13.2\n    hooks:\n      - id: isort\n        name: isort (python)\n</code></pre> <p>under the <code>repos</code> section of your projects <code>.pre-commit-config.yaml</code> file.  Optionally if you want to have different hooks over different file types (ex: python vs cython vs pyi) you can do so with the following config:</p> <pre><code>  - repo: https://github.com/pycqa/isort\n    rev: 5.13.2\n    hooks:\n      - id: isort\n        name: isort (python)\n      - id: isort\n        name: isort (cython)\n        types: [cython]\n      - id: isort\n        name: isort (pyi)\n        types: [pyi]\n</code></pre>"},{"location":"configuration/pre-commit/#seed-isort-config","title":"seed-isort-config","text":"<p>Older versions of isort used a lot of magic to determine import placement, that could easily break when running on CI/CD. To fix this, a utility called <code>seed-isort-config</code> was created. Since isort 5 however, the project has drastically improved its placement logic and ensured a good level of consistency across environments. If you have a step in your pre-commit config called <code>seed-isort-config</code> or similar, it is highly recommend that you remove this. It is guaranteed to slow things down, and can conflict with isort's own module placement logic.</p>"},{"location":"configuration/profiles/","title":"Built-in Profile for isort","text":"<p>The following profiles are built into isort to allow easy interoperability with common projects and code styles.</p> <p>To use any of the listed profiles, use <code>isort --profile PROFILE_NAME</code> from the command line, or <code>profile=PROFILE_NAME</code> in your configuration file.</p>"},{"location":"configuration/profiles/#black","title":"black","text":"<ul> <li>multi_line_output: <code>3</code></li> <li>include_trailing_comma: <code>True</code></li> <li>split_on_trailing_comma: <code>True</code></li> <li>force_grid_wrap: <code>0</code></li> <li>use_parentheses: <code>True</code></li> <li>ensure_newline_before_comments: <code>True</code></li> <li>line_length: <code>88</code></li> </ul>"},{"location":"configuration/profiles/#django","title":"django","text":"<ul> <li>combine_as_imports: <code>True</code></li> <li>include_trailing_comma: <code>True</code></li> <li>multi_line_output: <code>5</code></li> <li>line_length: <code>79</code></li> </ul>"},{"location":"configuration/profiles/#pycharm","title":"pycharm","text":"<ul> <li>multi_line_output: <code>3</code></li> <li>force_grid_wrap: <code>2</code></li> <li>lines_after_imports: <code>2</code></li> </ul>"},{"location":"configuration/profiles/#google","title":"google","text":"<ul> <li>force_single_line: <code>True</code></li> <li>force_sort_within_sections: <code>True</code></li> <li>lexicographical: <code>True</code></li> <li>single_line_exclusions: <code>('typing',)</code></li> <li>order_by_type: <code>False</code></li> <li>group_by_package: <code>True</code></li> </ul>"},{"location":"configuration/profiles/#open_stack","title":"open_stack","text":"<ul> <li>force_single_line: <code>True</code></li> <li>force_sort_within_sections: <code>True</code></li> <li>lexicographical: <code>True</code></li> </ul>"},{"location":"configuration/profiles/#plone","title":"plone","text":"<ul> <li>force_alphabetical_sort: <code>True</code></li> <li>force_single_line: <code>True</code></li> <li>lines_after_imports: <code>2</code></li> <li>line_length: <code>200</code></li> </ul>"},{"location":"configuration/profiles/#attrs","title":"attrs","text":"<ul> <li>atomic: <code>True</code></li> <li>force_grid_wrap: <code>0</code></li> <li>include_trailing_comma: <code>True</code></li> <li>lines_after_imports: <code>2</code></li> <li>lines_between_types: <code>1</code></li> <li>multi_line_output: <code>3</code></li> <li>use_parentheses: <code>True</code></li> </ul>"},{"location":"configuration/profiles/#hug","title":"hug","text":"<ul> <li>multi_line_output: <code>3</code></li> <li>include_trailing_comma: <code>True</code></li> <li>force_grid_wrap: <code>0</code></li> <li>use_parentheses: <code>True</code></li> <li>line_length: <code>100</code></li> </ul>"},{"location":"configuration/profiles/#wemake","title":"wemake","text":"<ul> <li>multi_line_output: <code>3</code></li> <li>include_trailing_comma: <code>True</code></li> <li>use_parentheses: <code>True</code></li> <li>line_length: <code>80</code></li> </ul>"},{"location":"configuration/profiles/#appnexus","title":"appnexus","text":"<ul> <li>multi_line_output: <code>3</code></li> <li>include_trailing_comma: <code>True</code></li> <li>force_grid_wrap: <code>0</code></li> <li>use_parentheses: <code>True</code></li> <li>ensure_newline_before_comments: <code>True</code></li> <li>line_length: <code>88</code></li> <li>force_sort_within_sections: <code>True</code></li> <li>order_by_type: <code>False</code></li> <li>case_sensitive: <code>False</code></li> <li>reverse_relative: <code>True</code></li> <li>sort_relative_in_force_sorted_sections: <code>True</code></li> <li>sections: <code>['FUTURE', 'STDLIB', 'THIRDPARTY', 'FIRSTPARTY', 'APPLICATION', 'LOCALFOLDER']</code></li> <li>no_lines_before: <code>'LOCALFOLDER'</code></li> </ul>"},{"location":"configuration/setuptools_integration/","title":"Setuptools integration","text":"<p>Upon installation, isort enables a <code>setuptools</code> command that checks Python files declared by your project.</p> <p>Running <code>python setup.py isort</code> on the command line will check the files listed in your <code>py_modules</code> and <code>packages</code>. If any warning is found, the command will exit with an error code:</p> <pre><code>$ python setup.py isort\n</code></pre> <p>Also, to allow users to be able to use the command without having to install isort themselves, add isort to the setup_requires of your <code>setup()</code> like so:</p> <pre><code>setup(\n    name=\"project\",\n    packages=[\"project\"],\n\n    setup_requires=[\n        \"isort\"\n    ]\n)\n</code></pre>"},{"location":"contributing/1.-contributing-guide/","title":"Contributing to isort","text":"<p>Looking for a useful open source project to contribute to? Want your contributions to be warmly welcomed and acknowledged? Welcome! You have found the right place.</p>"},{"location":"contributing/1.-contributing-guide/#getting-isort-set-up-for-local-development","title":"Getting isort set up for local development","text":"<p>The first step when contributing to any project is getting it set up on your local machine. isort aims to make this as simple as possible.</p> <p>Account Requirements:</p> <ul> <li>A valid GitHub account</li> </ul> <p>Base System Requirements:</p> <ul> <li>Python3.9+</li> <li>uv</li> <li>bash or a bash compatible shell (should be auto-installed on Linux / Mac)</li> <li>WSL users running Ubuntu may need to install Python's venv module even after installing Python.</li> </ul> <p>Once you have verified that your system matches the base requirements you can start to get the project working by following these steps:</p> <ol> <li>Fork the project on GitHub.</li> <li>Clone your fork to your local file system:     <code>git clone https://github.com/$GITHUB_ACCOUNT/isort.git</code></li> <li><code>cd isort</code></li> <li><code>uv sync --all-extras --frozen</code></li> <li>Optionally, isolate uv's installation from the rest of your system using the instructions on the uv site here: https://docs.astral.sh/uv/ </li> <li><code>./scripts/test.sh</code> should yield Success: no issues found</li> <li><code>./scripts/clean.sh</code> should yield a report checking packages</li> </ol> <p>TIP: <code>./scripts/done.sh</code> will run both clean and test in one step.</p>"},{"location":"contributing/1.-contributing-guide/#docker-development","title":"Docker development","text":"<p>If you would instead like to develop using Docker, the only local requirement is docker. See the docker docs if you have not used docker before.</p> <p>Once you have the docker daemon running and have cloned the repository, you can get started by following these steps:</p> <ol> <li><code>cd isort</code></li> <li><code>./scripts/docker.sh</code></li> </ol> <p>A local test cycle might look like the following:</p> <ol> <li><code>docker build ./ -t isort:latest</code></li> <li><code>docker run isort</code></li> <li>if #2 fails, debug, save, and goto #1<ul> <li><code>docker run -it isort bash</code> will get you into the failed environment</li> <li><code>docker run -v $(git rev-parse --show-toplevel):/isort</code> will make changes made in the docker environment persist on your local checkout.   TIP: combine both to get an interactive docker shell that loads changes made locally, even after build, to quickly rerun that pesky failing test</li> </ul> </li> <li><code>./scripts/docker.sh</code></li> <li>if #4 fails, debug, save and goto #1; you may need to specify a different <code>--build-arg VERSION=$VER</code></li> <li>congrats! you are probably ready to push a contribution</li> </ol>"},{"location":"contributing/1.-contributing-guide/#making-a-contribution","title":"Making a contribution","text":"<p>Congrats! You're now ready to make a contribution! Use the following as a guide to help you reach a successful pull-request:</p> <ol> <li>Check the issues page on GitHub to see if the task you want to complete is listed there.<ul> <li>If it's listed there, write a comment letting others know you are working on it.</li> <li>If it's not listed in GitHub issues, go ahead and log a new issue. Then add a comment letting everyone know you have it under control.<ul> <li>If you're not sure if it's something that is good for the main isort project and want immediate feedback, you can discuss it here.</li> </ul> </li> </ul> </li> <li>Create an issue branch for your local work <code>git checkout -b issue/$ISSUE-NUMBER</code>.</li> <li>Do your magic here.</li> <li>Ensure your code matches the HOPE-8 Coding Standard used by the project.</li> <li>Run tests locally to make sure everything is still working     <code>./scripts/done.sh</code> Or if you are using Docker <code>docker run isort:latest</code></li> <li>Submit a pull request to the main project repository via GitHub.</li> </ol> <p>Thanks for the contribution! It will quickly get reviewed, and, once accepted, will result in your name being added to the acknowledgments list :).</p>"},{"location":"contributing/1.-contributing-guide/#thank-you","title":"Thank you!","text":"<p>I can not tell you how thankful I am for the hard work done by isort contributors like you.</p> <p>Thank you!</p> <p>~Timothy Crosley</p>"},{"location":"contributing/2.-coding-standard/","title":"HOPE 8 -- Style Guide for Hug Code","text":"HOPE: 8 Title: Style Guide for Hug Code Author(s): Timothy Crosley timothy.crosley@gmail.com Status: Active Type: Process Created: 19-May-2019 Updated: 17-August-2019"},{"location":"contributing/2.-coding-standard/#introduction","title":"Introduction","text":"<p>This document gives coding conventions for the Hug code comprising the Hug core as well as all official interfaces, extensions, and plugins for the framework. Optionally, projects that use Hug are encouraged to follow this HOPE and link to it as a reference.</p>"},{"location":"contributing/2.-coding-standard/#pep-8-foundation","title":"PEP 8 Foundation","text":"<p>All guidelines in this document are in addition to those defined in Python's PEP 8 and PEP 257 guidelines.</p>"},{"location":"contributing/2.-coding-standard/#line-length","title":"Line Length","text":"<p>Too short of lines discourage descriptive variable names where they otherwise make sense. Too long of lines reduce overall readability and make it hard to compare 2 files side by side. There is no perfect number: but for Hug, we've decided to cap the lines at 100 characters.</p>"},{"location":"contributing/2.-coding-standard/#descriptive-variable-names","title":"Descriptive Variable names","text":"<p>Naming things is hard. Hug has a few strict guidelines on the usage of variable names, which hopefully will reduce some of the guesswork: - No one character variable names.     - Except for x, y, and z as coordinates. - It's not okay to override built-in functions.     - Except for <code>id</code>. Guido himself thought that shouldn't have been moved to the system module. It's too commonly used, and alternatives feel very artificial. - Avoid Acronyms, Abbreviations, or any other short forms - unless they are almost universally understand.</p>"},{"location":"contributing/2.-coding-standard/#adding-new-modules","title":"Adding new modules","text":"<p>New modules added to the a project that follows the HOPE-8 standard should all live directly within the base <code>PROJECT_NAME/</code> directory without nesting. If the modules are meant only for internal use within the project, they should be prefixed with a leading underscore. For example, def _internal_function. Modules should contain a docstring at the top that gives a general explanation of the purpose and then restates the project's use of the MIT license. There should be a <code>tests/test_$MODULE_NAME.py</code> file created to correspond to every new module that contains test coverage for the module. Ideally, tests should be 1:1 (one test object per code object, one test method per code method) to the extent cleanly possible.</p>"},{"location":"contributing/2.-coding-standard/#automated-code-cleaners","title":"Automated Code Cleaners","text":"<p>All code submitted to Hug should be formatted using Black and isort. Black should be run with the line length set to 100, and isort with Black compatible settings in place.</p>"},{"location":"contributing/2.-coding-standard/#automated-code-linting","title":"Automated Code Linting","text":"<p>All code submitted to hug should run through the following tools:</p> <ul> <li>Black and isort verification.</li> <li>Flake8</li> <li>flake8-bugbear</li> <li>Bandit</li> <li>ruff</li> <li>pep8-naming</li> <li>vulture</li> </ul>"},{"location":"contributing/3.-code-of-conduct/","title":"HOPE 11 -- Code of Conduct","text":"HOPE: 11 Title: Code of Conduct Author(s): Timothy Crosley timothy.crosley@gmail.com Status: Active Type: Process Created: 17-August-2019 Updated: 17-August-2019"},{"location":"contributing/3.-code-of-conduct/#abstract","title":"Abstract","text":"<p>Defines the Code of Conduct for Hug and all related projects.</p>"},{"location":"contributing/3.-code-of-conduct/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"contributing/3.-code-of-conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or  advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic  address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a  professional setting</li> </ul>"},{"location":"contributing/3.-code-of-conduct/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"contributing/3.-code-of-conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"contributing/3.-code-of-conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting timothy.crosley@gmail.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. Confidentiality will be maintained with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"contributing/3.-code-of-conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the [Contributor Covenant][https://www.contributor-covenant.org], version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</p> <p>For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq</p>"},{"location":"contributing/4.-acknowledgements/","title":"Core Developers","text":"<ul> <li>Aniruddha Bhattacharjee (@anirudnits)</li> <li>Jon Dufresne (@jdufresne)</li> <li>Tamas Szabo (@sztamas)</li> <li>Thiago A. (@staticdev)</li> <li>Timothy Edmund Crosley (@timothycrosley)</li> </ul>"},{"location":"contributing/4.-acknowledgements/#plugin-writers","title":"Plugin Writers","text":"<ul> <li>VIM - Juan Pedro Fisanotti (@fisadev)</li> <li>Emacs - Friedrich Paetzke (@paetzke)</li> <li>Sublime - Thijs de Zoute (@thijsdezoete)</li> </ul>"},{"location":"contributing/4.-acknowledgements/#notable-bug-reporters","title":"Notable Bug Reporters","text":"<ul> <li>Bengt L\u00fcers (@Bengt)</li> <li>Chris Adams (@acdha)</li> <li>@OddBloke</li> <li>Martin Geisler (@mgeisleinr)</li> <li>Tim Heap (@timheap)</li> <li>Mat\u011bj Nikl (@MatejNikl)</li> </ul>"},{"location":"contributing/4.-acknowledgements/#code-contributors","title":"Code Contributors","text":"<ul> <li>Aaron Gallagher (@habnabit)</li> <li>Thomas Grainger (@graingert)</li> <li>Thijs de Zoute (@thijsdezoete)</li> <li>Marc Abramowitz (@msabramo)</li> <li>Daniel Cowgill (@dcowgill)</li> <li>Francois Lebel (@flebel)</li> <li>Antoni Segura Puimedon (@celebdor)</li> <li>Pablo (@oubiga)</li> <li>Oskar Hahn (@ostcar)</li> <li>Wim Glenn (@wimglenn)</li> <li>Matt Caldwell (@mattcaldwell)</li> <li>Dwayne Bailey (@dwaynebailey)</li> <li>Ionel Cristian M\u0103rie\u0219 (@ionelmc)</li> <li>Chris Adams (@acdha)</li> <li>GuoJing (@GuoJing)</li> <li>George Hickman (@ghickman)</li> <li>Dan Davison (@dandavison)</li> <li>Maciej Wolff (@maciejwo)</li> <li>Elliott Sales de Andrade (@qulogic)</li> <li>Kasper Jacobsen (@dinoshauer)</li> <li>Sebastian Pipping (@hartwork)</li> <li>Helen Sherwood-Taylor (@helenst)</li> <li>Mocker (@Zuckonit)</li> <li>Tim Graham (@timgraham)</li> <li>Adam (@NorthIsUp)</li> <li>Norman J\u00e4ckel (@normanjaeckel)</li> <li>Derrick Petzold (@dpetzold)</li> <li>Michael van Tellingen (@mvantellingen)</li> <li>Patrick Yevsukov (@patrickyevsukov)</li> <li>Christer van der Meeren (@cmeeren)</li> <li>Timon Wong/NHNCN (@timonwong)</li> <li>Jeremy Dunck (@jdunck)</li> <li>Benjamin ABEL (@benjaminabel)</li> <li>Dan Baragan (@danbaragan)</li> <li>Rob Cowie (@robcowie)</li> <li>Amit Shah (@Amwam)</li> <li>Patrick Gerken (@do3cc)</li> <li>@dein0s</li> <li>David Stensland (@terite)</li> <li>Ankur Dedania (@AbsoluteMSTR)</li> <li>Lee Packham (@leepa)</li> <li>Jesse Mullan (@jmullan)</li> <li>Kwok-kuen Cheung (@cheungpat)</li> <li>Johan Bloemberg (@aequitas)</li> <li>Dan Watson (@dcwatson)</li> <li>\u00c9ric Araujo (@merwok)</li> <li>Dan Palmer (@danpalmer)</li> <li>Andy Boot (@bootandy)</li> <li>@m7v8</li> <li>John Vandenberg (@jayvdb)</li> <li>Adam Chainz (@adamchainz)</li> <li>@Brightcells</li> <li>Jonas Trappenberg (@teeberg)</li> <li>Andrew Konstantaras (@akonsta)</li> <li>Jason Brackman (@jasonbrackman)</li> <li>Kathryn Lingel (@katlings)</li> <li>Andrew Gaul (@gaul)</li> <li>John Chadwick (@jchv)</li> <li>Jon Dufresne (@jdufresne)</li> <li>Brian F. Baron (@briabar)</li> <li>Madison Caldwell (@madirey)</li> <li>Matt Yule-Bennett (@mattbennett)</li> <li>Jaswanth Kumar (@jaswanth098)</li> <li>Dario Navin (@Zarathustra2)</li> <li>Danny Weinberg (@FuegoFro)</li> <li>Gram (@orsinium)</li> <li>Hugo van Kemenade (@hugovk)</li> <li>G\u00e9ry Ogam (@maggyero)</li> <li>Cody Scott (@Siecje)</li> <li>Pedro Algarvio (@s0undt3ch)</li> <li>Chris St. Pierre (@stpierre)</li> <li>Sebastian Rittau (@srittau)</li> <li>Jo\u00e3o M.C. Teixeira (@joaomcteixeira)</li> <li>Honnix (@honnix)</li> <li>Anders Kaseorg (@andersk)</li> <li>@r-richmond</li> <li>Sebastian (@sebix)</li> <li>Kosei Kitahara (@Surgo)</li> <li>Seung Hyeon, Kim (@hyeonjames)</li> <li>Gerard Dalmau (@gdalmau)</li> <li>Robert Tasarz (@rtasarz)</li> <li>Ryo Miyajima (@sergeant-wizard)</li> <li>@mdagaro</li> <li>Maksim Kurnikov (@mkurnikov)</li> <li>Daniel Hahler (@blueyed)</li> <li>@ucodery</li> <li>Aarni Koskela (@akx)</li> <li>Alex Chan (@alexwlchan)</li> <li>Rick Thomas (@richardlthomas)</li> <li>Jeppe Fihl-Pearson (@Tenzer)</li> <li>Jonas Lundberg (@lundberg)</li> <li>Neil (@NeilGirdhar)</li> <li>@dmanikowski-reef</li> <li>Stephen Brown II (@StephenBrown2)</li> <li>Ankur Dedania (@AnkurDedania)</li> <li>Anthony Sottile (@asottile)</li> <li>Bendik Samseth (@bsamseth)</li> <li>Dan W Anderson (@anderson-dan-w)</li> <li>DeepSource Bot (@deepsourcebot)</li> <li>Mitar (@mitar)</li> <li>Omer Katz (@thedrow)</li> <li>Santiago Castro (@bryant1410)</li> <li>Sergey Fursov (@GeyseR)</li> <li>Thomas Robitaille (@astrofrog)</li> <li>Ville Skytt\u00e4 (@scop)</li> <li>Hakan \u00c7elik (@hakancelik96)</li> <li>Dylan Katz (@Plazmaz)</li> <li>Linus Lewandowski (@LEW21)</li> <li>Bastien G\u00e9rard (@bagerard)</li> <li>Brian Dombrowski (@bdombro)</li> <li>Ed Morley (@edmorley)</li> <li>Graeme Coupar (@obmarg)</li> <li>Jerome Leclanche (@jleclanche)</li> <li>Joshu Coats (@rhwlo)</li> <li>Mansour Behabadi (@oxplot)</li> <li>Sam Lai (@slai)</li> <li>Tamas Szabo (@sztamas)</li> <li>Yedidyah Bar David (@didib)</li> <li>Hidetoshi Hirokawa (@h-hirokawa)</li> <li>Aaron Chong (@acjh)</li> <li>Harai Akihiro (@harai)</li> <li>Andy Freeland (@rouge8)</li> <li>@ethifus</li> <li>Joachim Brandon LeBlanc (@demosdemon)</li> <li>Brian May (@brianmay)</li> <li>Bruno Oliveira (@nicoddemus)</li> <li>Bruno Reni\u00e9 (@brutasse)</li> <li>Bryce Guinta (@brycepg)</li> <li>David Chan (@dchanm)</li> <li>David Smith (@smithdc1)</li> <li>Irv Lustig (@Dr-Irv)</li> <li>Dylan Richardson (@dylrich)</li> <li>Emil Melnikov (@emilmelnikov)</li> <li>Eric Johnson (@metrizable)</li> <li>@ryabtsev</li> <li>Felix Yan (@felixonmars)</li> <li>Gil Forcada Codinachs (@gforcada)</li> <li>Ilya Konstantinov (@ikonst)</li> <li>Jace Browning (@jacebrowning)</li> <li>Jin Suk Park (@jinmel)</li> <li>J\u00fcrgen Gmach (@jugmac00)</li> <li>Maciej Gawinecki (@dzieciou)</li> <li>Minn Soe (@MinnSoe)</li> <li>Nikolaus Wittenstein (@adzenith)</li> <li>Norman J. Harman Jr. (@njharman)</li> <li>P R Gurunath (@gurunath-p)</li> <li>Patrick Hayes (@pfhayes)</li> <li>Pete Grayson (@jpgrayson)</li> <li>Philip Jenvey (@pjenvey)</li> <li>Rajiv Bakulesh Shah (@brainix)</li> <li>Reid D McKenzie (@arrdem)</li> <li>Robert DeRose (@RobertDeRose)</li> <li>Roey Darwish Dror (@r-darwish)</li> <li>Rudinei Goi Roecker (@rudineirk)</li> <li>Wagner (@wagner-certat)</li> <li>Nikita Sobolev (@sobolevn)</li> <li>Terence Honles (@terencehonles)</li> <li>The Gitter Badger (@gitter-badger)</li> <li>Tim Gates (@timgates42)</li> <li>Tim Staley (@timstaley)</li> <li>Vincent Hatakeyama (@vincent-hatakeyama)</li> <li>Yaron de Leeuw (@jarondl)</li> <li>@jwg4</li> <li>@nicolelodeon</li> <li>\u0141ukasz Langa (@ambv)</li> <li>Grzegorz Pstrucha (@Gricha)</li> <li>Zac Hatfield-Dodds (@Zac-HD)</li> <li>Ji\u0159\u00ed \u0160korpil (@JiriSko)</li> <li>James Winegar (@jameswinegar)</li> <li>Abdullah Dursun (@adursun)</li> <li>Guillaume Lostis (@glostis)</li> <li>Krzysztof Jagie\u0142\u0142o (@kjagiello)</li> <li>Nicholas Devenish (@ndevenish)</li> <li>Aniruddha Bhattacharjee (@anirudnits)</li> <li>Alexandre Yang (@AlexandreYang)</li> <li>Andrew Howe (@howeaj)</li> <li>Sang-Heon Jeon (@lntuition)</li> <li>Denis Veselov (@saippuakauppias)</li> <li>James Curtin (@jamescurtin)</li> <li>Marco Gorelli (@MarcoGorelli)</li> <li>Louis Sautier (@sbraz)</li> <li>Timur Kushukov (@timqsh)</li> <li>Bhupesh Varshney (@Bhupesh-V)</li> <li>Rohan Khanna (@rohankhanna)</li> <li>Vasilis Gerakaris (@vgerak)</li> <li>@tonci-bw</li> <li>@jaydesl</li> <li>Tamara (@infinityxxx)</li> <li>Akihiro Nitta (@akihironitta)</li> <li>Samuel Gaist (@sgaist)</li> <li>@dwanderson-intel</li> <li>Quentin Santos (@qsantos)</li> <li>@gofr</li> <li>Pavel Savchenko (@asfaltboy)</li> <li>@dongfangtianyu</li> <li>Christian Clauss (@cclauss)</li> <li>Jon Banafato (@jonafato)</li> <li>ruro (@RuRo)</li> <li>L\u00e9ni (@legau)</li> <li>keno (Ken Okada) (@kenoss)</li> <li>Shota Terashita (@shotat)</li> <li>Luca Di sera (@diseraluca)</li> <li>Tonye Jack (@jackton1)</li> <li>Yusuke Hayashi (@yhay81)</li> <li>Arthur Rio (@arthurio)</li> <li>Bob (@bobwalker99)</li> <li>Martijn Pieters (@mjpieters)</li> <li>Asiel D\u00edaz Ben\u00edtez (@adbenitez)</li> <li>Almaz (@monosans)</li> <li>Mathieu Kniewallner (@mkniewallner)</li> <li>Christian Decker (@chrisdecker1201)</li> <li>Adam Parkin (@pzelnip)</li> <li>@MapleCCC</li> <li>@Parnassius</li> <li>@SaucyGames05</li> <li>Tim Heap (@mx-moth)</li> </ul>"},{"location":"contributing/4.-acknowledgements/#documenters","title":"Documenters","text":"<ul> <li>Reinout van Rees (@reinout)</li> <li>Helen Sherwood-Taylor (@helenst)</li> <li>Elliott Sales de Andrade (@QuLogic)</li> <li>Brian Peiris (@brianpeiris)</li> <li>Tim Graham (@timgraham)</li> <li>Josh Soref (@jsoref)</li> <li>Teg Khanna (@tegkhanna)</li> <li>Sarah Beth Tracy (@sbtries)</li> <li>Aaron Brown (@aaronvbrown)</li> <li>Harutaka Kawamura (@harupy)</li> <li>Brad Solomon (@bsolomon1124)</li> <li>Martynas Mickevi\u010dius (@2m)</li> <li>Taneli Hukkinen (@hukkinj1)</li> <li>@r-richmond</li> <li>John Villalovos (@JohnVillalovos)</li> <li>Kosei Kitahara (@Surgo)</li> <li>Marat Sharafutdinov (@decaz)</li> <li>Abtin (@abtinmo)</li> <li>@scottwedge</li> <li>Hasan Ramezani (@hramezani)</li> <li>@hirosassa</li> <li>David Poznik (@dpoznik)</li> <li>Mike Frysinger (@vapier)</li> <li>@DanielFEvans</li> <li>Giuseppe Lumia (@glumia)</li> <li>John Brock (@JohnHBrock)</li> <li>Sergey Fedoseev (@sir-sigurd)</li> </ul> <p>A sincere thanks to everyone who has helped isort be the great utility it is today! It would not be one-hundredth as useful and consistent as it is now without the help of your bug reports, commits, and suggestions. You guys rock!</p> <p>~Timothy Crosley</p>"},{"location":"howto/shared_profiles/","title":"Shared Profiles","text":"<p>As well as the built in profiles, you can define and share your own profiles.</p> <p>All that's required is to create a Python package that exposes an entry point to a dictionary exposing profile settings under <code>isort.profiles</code>. An example is available within the <code>isort</code> repo</p>"},{"location":"howto/shared_profiles/#example-isortcfg","title":"Example <code>.isort.cfg</code>","text":"<pre><code>[options.entry_points]\nisort.profiles =\n    shared_profile=my_module:PROFILE\n</code></pre>"},{"location":"major_releases/introducing_isort_5/","title":"Introducing isort 5","text":"<p>isort 5.0.0 is the first major release of isort in over five years and the first significant refactoring of isort since it was conceived more than ten years ago. It's also the first version to require Python 3 (Python 3.6+ at that!) to run - though it can still be run on source files from any version of Python. This does mean that there may be some pain with the upgrade process, but we believe the improvements will be well worth it.</p> <p>Click here for an attempt at full changelog with a list of breaking changes.</p> <p>Using isort 4.x.x? Click here for the isort 5.0.0 upgrade guide.</p> <p>Try isort 5 right now from your browser!</p> <p>So why the massive change?</p>"},{"location":"major_releases/introducing_isort_5/#profile-support","title":"Profile support","text":"<pre><code>isort --profile black .\nisort --profile django .\nisort --profile pycharm .\nisort --profile google .\nisort --profile open_stack .\nisort --profile plone .\nisort --profile attrs .\nisort --profile hug .\n</code></pre> <p>isort is very configurable. That's great, but it can be overwhelming, both for users and for the isort project. isort now comes with profiles for the most common isort configurations, so you likely will not need to configure anything at all. This also means that as a project, isort can run extensive tests against these specific profiles to ensure nothing breaks over time.</p>"},{"location":"major_releases/introducing_isort_5/#sort-imports-anywhere","title":"Sort imports anywhere","text":"<pre><code>import a  # &lt;- These are sorted\nimport b\n\nb.install(a)\n\nimport os  # &lt;- And these are sorted\nimport sys\n\n\ndef my_function():\n    import x  # &lt;- Even these are sorted!\n    import z\n</code></pre> <p>isort 5 will find and sort contiguous section of imports no matter where they are. It also allows you to place code in-between imports without any hacks required.</p>"},{"location":"major_releases/introducing_isort_5/#streaming-architecture","title":"Streaming architecture","text":"<p><pre><code>import a\nimport b\n...\n\u221e\n</code></pre> isort has been refactored to use a streaming architecture. This means it can sort files of any size (even larger than the Python interpreter supports!) without breaking a sweat. It also means that even when sorting imports in smaller files, it is faster and more resource-efficient.</p>"},{"location":"major_releases/introducing_isort_5/#consistent-behavior-across-all-environments","title":"Consistent behavior across all environments","text":"<p>Sorting the same file with the same configuration should give you the same output no matter what computer or OS you are running. Extensive effort has been placed around refactoring how modules are placed and how configuration files are loaded to ensure this is the case.</p>"},{"location":"major_releases/introducing_isort_5/#cython-support","title":"Cython support","text":"<pre><code>cimport ctime\nfrom cpython cimport PyLong_FromVoidPtr\nfrom cpython cimport bool as py_bool\nfrom cython.operator cimport dereference as deref\nfrom cython.operator cimport preincrement as preinc\nfrom libc.stdint cimport uint64_t, uintptr_t\nfrom libc.stdlib cimport atoi, calloc, free, malloc\nfrom libc.string cimport memcpy, strlen\nfrom libcpp cimport bool as cpp_bool\nfrom libcpp.map cimport map as cpp_map\nfrom libcpp.pair cimport pair as cpp_pair\nfrom libcpp.string cimport string as cpp_string\nfrom libcpp.vector cimport vector as cpp_vector\nfrom multimap cimport multimap as cpp_multimap\nfrom wstring cimport wstring as cpp_wstring\n</code></pre> <p>isort 5 adds seamless support for Cython (<code>.pyx</code>) files.</p>"},{"location":"major_releases/introducing_isort_5/#action-comments","title":"Action Comments","text":"<pre><code>import e\nimport f\n\n# isort: off  &lt;- Turns isort parsing off\n\nimport b\nimport a\n\n# isort: on  &lt;- Turns isort parsing back on\n\nimport c\nimport d\n</code></pre> <p>isort 5 adds support for Action Comments which provide a quick and convenient way to control the flow of parsing within single source files.</p>"},{"location":"major_releases/introducing_isort_5/#first-class-python-api","title":"First class Python API","text":"<pre><code>import isort\n\nisort.code(\"\"\"\nimport b\nimport a\n\"\"\") == \"\"\"\nimport a\nimport b\n\"\"\"\n</code></pre> <p>isort now exposes its programmatic API as a first-class citizen. This API makes it easy to extend or use isort in your own Python project. You can see the full documentation for this new API here.</p>"},{"location":"major_releases/introducing_isort_5/#solid-base-for-the-future","title":"Solid base for the future","text":"<p>A major focus for the release was to give isort a solid foundation for the next 5-10 years of the project's life. isort has been refactored into functional components that are easily testable. The project now has 100% code coverage. It utilizes tools like Hypothesis to reduce the number of unexpected errors. It went from fully dynamic to fully static typing using mypy. Finally, it utilizes the latest linters both on (like DeepSource) and offline (like Flake8) to help ensure a higher bar for all code contributions into the future.</p>"},{"location":"major_releases/introducing_isort_5/#give-500-a-try","title":"Give 5.0.0 a try!","text":"<p>Try isort 5 right now from your browser!</p> <p>OR</p> <p>Install isort locally using <code>pip3 install isort</code>.</p> <p>Click here for full installation instructions.</p>"},{"location":"major_releases/release_policy/","title":"isort Project Official Release Policy","text":"<p>isort has moved from being a simple hobby project for individuals to sort imports in their Python files to an essential part of the CI/CD pipeline for large companies and significant Open Source projects. Due to this evolution, it is now of increased importance that isort maintains a level of quality, predictability, and consistency that gives projects big and small confidence to depend on it.</p>"},{"location":"major_releases/release_policy/#formatting-guarantees","title":"Formatting guarantees","text":"<p>With isort 5.1.0, the isort Project guarantees that formatting will stay the same for the options given in accordance to its test suite for the duration of all major releases. This means projects can safely use isort &gt; 5.1.0 &lt; 6.0.0 without worrying about major formatting changes disrupting their Project.</p>"},{"location":"major_releases/release_policy/#packaging-guarantees","title":"Packaging guarantees","text":"<p>Starting with the 5.0.0 release isort includes the following project guarantees to help guide development:</p> <ul> <li>isort will never have dependencies, optional, required, or otherwise.</li> <li>isort will always act the same independent to the Python environment it is installed in.</li> </ul>"},{"location":"major_releases/release_policy/#versioning","title":"Versioning","text":"<p>isort follows the Semantic Versioning 2.0.0 specification meaning it has three numerical version parts with distinct rules <code>MAJOR.MINOR.PATCH</code>.</p>"},{"location":"major_releases/release_policy/#patch-releases-xx1","title":"Patch Releases x.x.1","text":"<p>Within the isort Project, patch releases are really meant solely to fix bugs and minor oversights. Patch releases should never drastically change formatting, even if it's for the better.</p>"},{"location":"major_releases/release_policy/#minor-releases-x1x","title":"Minor Releases x.1.x","text":"<p>Minor changes can contain new backward-incompatible features, and of particular note can include bug fixes that result in intentional formatting changes - but they should still never be too large in scope. API backward compatibility should strictly be maintained.</p>"},{"location":"major_releases/release_policy/#major-releases-1xx","title":"Major Releases 1.x.x","text":"<p>Major releases are the only place where backward-incompatible changes or substantial formatting changes can occur. Because these kind of changes are likely to break projects that utilize isort, either as a formatter or library, isort must do the following:</p> <ul> <li>Release a release candidate with at least 2 weeks for bugs to be reported and fixed.</li> <li>Keep releasing follow up release candidates until there are no or few bugs reported.</li> <li>Provide an upgrade guide that helps users work around any backward-incompatible changes.</li> <li>Provide a detailed changelog of all changes.</li> <li>Where possible, warn and point to the upgrade guide instead of breaking when options are removed.</li> </ul>"},{"location":"quick_start/0.-try/","title":"Try isort from your browser!","text":"<p>Use our live isort editor to see how isort can help improve the formatting of your Python imports.</p> <p>Safe to use. No code is transmitted.</p> <p>The below live isort tester doesn't transmit any of the code you paste to our server or anyone else's. Instead, this page runs a complete Python3 installation with isort installed entirely within your browser. To accomplish this, it utilizes the pyodide project.</p> <p> <p> </p> from future import braces import b import b import os import a from future import braces import b import a import b, a  Loading...   \u00a0Configuration (Note: the below must follow JSON format). Full configuration guide is here:  {\"line_length\": 80,  \"profile\": \"black\",  \"atomic\": true }  <p>Like what you saw? Installing isort to use locally is as simple as <code>pip3 install isort</code>.</p> <p>Click here for full installation instructions.</p>"},{"location":"quick_start/1.-install/","title":"1. install","text":"<p>Install <code>isort</code> using your preferred Python package manager:</p> <p><code>pip3 install isort</code></p> <p>OR</p> <p><code>uv add isort</code></p> <p>OR</p> <p><code>poetry add isort</code></p> <p>OR</p> <p><code>pipenv install isort</code></p> <p>OR</p> <p>For a fully isolated user installation you can use pipx</p> <p><code>pipx install isort</code></p> <p>Tip</p> <p>If you want isort to act as a linter for projects, it probably makes sense to add isort as an explicit development dependency for each project that uses it. If, on the other hand, you are an individual developer simply using isort as a personal tool to clean up your own commits, a global or user level installation makes sense. Both are seamlessly supported on a single machine.</p>"},{"location":"quick_start/2.-cli/","title":"Command Line Usage","text":"<p>Once installed, <code>isort</code> exposes a command line utility for sorting, organizing, and formatting imports within Python and Cython source files.</p> <p>To verify the tool is installed correctly, run <code>isort</code> from the command line and you should be given the available commands and the version of isort installed. For a list of all CLI options type <code>isort --help</code> or view the online configuration reference:</p>"},{"location":"quick_start/2.-cli/#formatting-a-project","title":"Formatting a Project","text":"<p>In general, isort is most commonly utilized across an entire projects source at once. The simplest way to do this is <code>isort .</code> or if using a <code>src</code> directory <code>isort src</code>. isort will automatically find all Python source files recursively and pick-up a configuration file placed at the root of your project if present. This can be combined with any command line configuration customizations such as specifying a profile to use (<code>isort . --profile black</code>).</p>"},{"location":"quick_start/2.-cli/#verifying-a-project","title":"Verifying a Project","text":"<p>The second most common usage of isort is verifying that imports within a project are formatted correctly (often within the context of a CI/CD system). The simplest way to accomplish this is using the check command line option: <code>isort --check .</code>. To improve the usefulness of errors when they do occur, this can be combined with the diff option: <code>isort --check --diff .</code>.</p>"},{"location":"quick_start/2.-cli/#single-source-files","title":"Single Source Files","text":"<p>Finally, isort can just as easily be ran against individual source files. Simply pass in a single or multiple source files to sort or validate (Example: <code>isort setup.py</code>).</p>"},{"location":"quick_start/2.-cli/#multiple-projects","title":"Multiple Projects","text":"<p>Running a single isort command across multiple projects, or source files spanning multiple projects, is highly discouraged. Instead it is recommended that an isort process (or command) is ran for each project independently. This is because isort creates an immutable config for each CLI instance.</p> <pre><code># YES\nisort project1\nisort project2\n\n# Also YES\nisort project1/src project1/test\nisort project2/src project2/test\n\n# NO\nisort project1 project2\n</code></pre>"},{"location":"quick_start/3.-api/","title":"Programmatic Python API Usage","text":"<p>In addition to the powerful command line interface, isort exposes a complete Python API.</p> <p>To use the Python API, <code>import isort</code> and then call the desired function call:</p> <p>Every function is fully type hinted and requires and returns only builtin Python objects.</p> <p>Highlights include:</p> <ul> <li><code>isort.code</code> - Takes a string containing code, and returns it with imports sorted.</li> <li><code>isort.check_code</code> - Takes a string containing code, and returns <code>True</code> if all imports are sorted correctly, otherwise, <code>False</code>.</li> <li><code>isort.stream</code> - Takes an input stream containing Python code and an output stream. Outputs code to output stream with all imports sorted.</li> <li><code>isort.check_stream</code> - Takes an input stream containing Python code and returns <code>True</code> if all imports in the stream are sorted correctly, otherwise, <code>False</code>.</li> <li><code>isort.file</code> - Takes the path of a Python source file and sorts the imports in-place.</li> <li><code>isort.check_file</code> - Takes the path of a Python source file and returns <code>True</code> if all imports contained within are sorted correctly, otherwise, <code>False</code>.</li> <li><code>isort.place_module</code> - Takes the name of a module as a string and returns the categorization determined for it.</li> <li><code>isort.place_module_with_reason</code> - Takes the name of a module as a string and returns the categorization determined for it and why that categorization was given.</li> </ul> <p>For a full definition of the API see the API reference documentation or try <code>help(isort)</code> from an interactive interpreter.</p>"},{"location":"upgrade_guides/5.0.0/","title":"Upgrading to 5.0.0","text":"<p>isort 5.0.0 is the first major release of isort in 5 years, and as such it does introduce some breaking changes. This guide is meant to help migrate projects from using isort 4.x.x unto the 5.0.0 release.</p> <p>Related documentation:</p> <ul> <li>isort 5.0.0 changelog</li> <li>isort 5 release document</li> </ul> <p>If you use pre-commit remove seed-isort-config.</p> <p>If you currently use pre-commit, make sure to see the pre-commit section of this document. In particular, make sure to remove any <code>seed-isort-config</code> pre-step.</p>"},{"location":"upgrade_guides/5.0.0/#imports-no-longer-moved-to-top","title":"Imports no Longer Moved to Top","text":"<p>One of the most immediately evident changes when upgrading to isort 5, is it now avoids moving imports around code by default. The great thing about this is that it means that isort can safely run against complex code bases that need to place side effects between import sections without needing any comments, flags, or configs. It's also part of the rearchitecting that allows it to sort within type checking conditionals and functions. However, it can be a jarring change for those of us who have gotten used to placing imports right above their usage in code to avoid context switching. No need to worry! isort still supports this work mode.</p> <p>If you want to move all imports to the top, you can use the new<code>--float-to-top</code> flag in the CLI or <code>float_to_top=true</code> option in your config file.</p> <p>See: https://pycqa.github.io/isort/docs/configuration/options.html#float-to-top</p>"},{"location":"upgrade_guides/5.0.0/#migrating-cli-options","title":"Migrating CLI options","text":""},{"location":"upgrade_guides/5.0.0/#-dont-skip-or-ns","title":"<code>--dont-skip</code> or <code>-ns</code>","text":"<p>In an earlier version isort had a default skip of <code>__init__.py</code>. To get around that many projects wanted a way to not skip <code>__init__.py</code> or any other files that were automatically skipped in the future by isort. isort no longer has any default skips, so if the value here is <code>__init__.py</code> you can simply remove the command line option. If it is something else, just make sure you aren't specifying to skip that file somewhere else in your config.</p>"},{"location":"upgrade_guides/5.0.0/#-recursive-or-rc","title":"<code>--recursive</code> or <code>-rc</code>","text":"<p>Prior to version 5.0.0, isort wouldn't automatically traverse directories. The --recursive option was necessary to tell it to do so. In 5.0.0 directories are automatically traversed for all Python files, and as such this option is no longer necessary and should simply be removed.</p>"},{"location":"upgrade_guides/5.0.0/#-apply-or-y","title":"<code>--apply</code> or <code>-y</code>","text":"<p>Prior to version 5.0.0, depending on how isort was executed, it would ask you before making every file change. In isort 5.0.0 file changes happen by default inline with other formatters. <code>--interactive</code> is available to restore the previous behavior. If encountered this option can simply be removed.</p>"},{"location":"upgrade_guides/5.0.0/#-keep-direct-and-as-or-k","title":"<code>--keep-direct-and-as</code> or <code>-k</code>","text":"<p>Many versions ago, by default isort would remove imports such as <code>from datetime import datetime</code> if an alias for the same import also existed such as <code>from datetime import datetime as dt</code> - never allowing both to exist. The option was originally added to allow working around this, and was then turned on as the default. Now the option for the old behaviour has been removed. Simply remove the option from your config file.</p>"},{"location":"upgrade_guides/5.0.0/#-ac-wl-ws-tc-sp-sp-sl-sg-sd-rr-ot-nlb-nis-ls-le-lbt-lai-fss-fgw-ff-fass-fas-dt-ds-df-cs-ca-af-ac","title":"<code>-ac</code>, <code>-wl</code>, <code>-ws</code>, <code>-tc</code>, <code>-sp</code>, <code>-sp</code>, <code>-sl</code>, <code>-sg</code>, <code>-sd</code>, <code>-rr</code>, <code>-ot</code>, <code>-nlb</code>, <code>-nis</code>, <code>-ls</code>, <code>-le</code>, <code>-lbt</code>, <code>-lai</code>, <code>-fss</code>, <code>-fgw</code>, <code>-ff</code>, <code>-fass</code>, <code>-fas</code>, <code>-dt</code>, <code>-ds</code>, <code>-df</code>, <code>-cs</code>, <code>-ca</code>, <code>-af</code>, <code>-ac</code>","text":"<p>Two-letter shortened setting names (like <code>ac</code> for <code>atomic</code>) now require two dashes to avoid ambiguity. Simply add another dash before the option, or switch to the long form option to fix (example: <code>--ac</code> or <code>--atomic</code>).</p>"},{"location":"upgrade_guides/5.0.0/#-v-and-v","title":"<code>-v</code> and <code>-V</code>","text":"<p>The <code>-v</code> (previously for version now for verbose) and <code>-V</code> (previously for verbose and now for version) options have been swapped to be more consistent with tools across the CLI and in particular Python ecosystem.</p>"},{"location":"upgrade_guides/5.0.0/#migrating-config-options","title":"Migrating Config options","text":"<p>The first thing to keep in mind is how isort loads config options has changed in isort 5. It will no longer merge multiple config files, instead you must have 1 isort config per a project. If you have multiple configs, they will need to be merged into 1 single one. You can see the priority order of configuration files and the manner in which they are loaded on the config files documentation page.</p> <p>Config options are loaded relative to the file, not the isort instance.</p> <p>isort looks for a config file based on the path of the file you request to sort. If you have your config placed outside of the project, you can use <code>--settings-path</code> to manually specify the config location instead. Full information about how config files are loaded is in the linked config files documentation page.</p>"},{"location":"upgrade_guides/5.0.0/#not_skip","title":"<code>not_skip</code>","text":"<p>This is the same as the <code>--dont-skip</code> CLI option above. In an earlier version isort had a default skip of <code>__init__.py</code>. To get around that many projects wanted a way to not skip <code>__init__.py</code> or any other files that were automatically skipped in the future by isort. isort no longer has any default skips, so if the value here is <code>__init__.py</code> you can simply remove the setting. If it is something else, just make sure you aren't specifying to skip that file somewhere else in your config.</p>"},{"location":"upgrade_guides/5.0.0/#keep_direct_and_as_imports","title":"<code>keep_direct_and_as_imports</code>","text":"<p>This is the same as <code>keep-direct-and-as</code> from CLI. Many versions ago, by default isort would remove imports such as <code>from datetime import datetime</code> if an alias for the same import also existed such as <code>from datetime import datetime as dt</code> - never allowing both to exist. The option was originally added to allow working around this, and was then turned on as the default. Now the option for the old behaviour has been removed. Simply remove the option from your config file.</p>"},{"location":"upgrade_guides/5.0.0/#known_standard_library","title":"<code>known_standard_library</code>","text":"<p>isort settings no longer merge together, instead they override. The old behavior of merging together caused many hard to track down errors, but the one place it was very convenient was for adding a few additional standard library modules. In isort 5, you can still get this behavior by moving your extra modules from the <code>known_standard_library</code> setting to <code>extra_standard_library</code>.</p>"},{"location":"upgrade_guides/5.0.0/#module-placement-changes-known_third_party-known_first_party-default_section-etc","title":"module placement changes: <code>known_third_party</code>, <code>known_first_party</code>, <code>default_section</code>, etc...","text":"<p>isort has completely rewritten its logic for placing modules in 5.0.0 to ensure the same behavior across environments. You can see the details of this change here. The TL;DR of which is that isort has now changed from <code>default_section=FIRSTPARTY</code> to <code>default_section=THIRDPARTY</code>. If you all already setting the default section to third party, your config is probably in good shape. If not, you can either use the old finding approach with <code>--magic-placement</code> in the CLI or <code>old_finders=True</code> in your config, or preferably, you are able to remove all placement options and isort will determine it correctly. If it doesn't, you should be able to just specify your projects modules with <code>known_first_party</code> and be done with it.</p>"},{"location":"upgrade_guides/5.0.0/#migrating-pre-commit","title":"Migrating pre-commit","text":""},{"location":"upgrade_guides/5.0.0/#seed-isort-config","title":"seed-isort-config","text":"<p>If you have a step in your precommit called <code>seed-isort-config</code> or similar, it is highly recommend that you remove this. It is unnecessary in 5.x.x, is guaranteed to slow things down, and worse can conflict with isort's own module placement logic.</p>"},{"location":"upgrade_guides/5.0.0/#isort-pre-commit-step","title":"isort pre-commit step","text":"<p>isort now includes an optimized precommit configuration in the repo itself. To use it you can replace any existing isort precommit step with:</p> <pre><code>  - repo: https://github.com/pycqa/isort\n    rev: 5.13.2\n    hooks:\n      - id: isort\n        name: isort (python)\n      - id: isort\n        name: isort (cython)\n        types: [cython]\n      - id: isort\n        name: isort (pyi)\n        types: [pyi]\n</code></pre> <p>under the <code>repos</code> section of your projects <code>.pre-commit-config.yaml</code> config.</p>"},{"location":"warning_and_error_codes/W0500/","title":"W0500 Warning Codes","text":"<p>The W0500 error codes are reserved for warnings related to a major release of the isort project. Generally, the existence of any of these will trigger one additional warning listing the upgrade guide.</p> <p>For the most recent upgrade guide, see: The 5.0.0 Upgrade Guide..</p>"},{"location":"warning_and_error_codes/W0500/#w0501-deprecated-cli-flags-were-included-that-will-be-ignored","title":"W0501: Deprecated CLI flags were included that will be ignored.","text":"<p>This warning will be shown if a CLI flag is passed into the isort command that is no longer supported but can safely be ignored. Often, this happens because an argument used to be required to turn on a feature that then became the default. An example of this is <code>--recursive</code> which became the default behavior for all folders passed-in starting with 5.0.0.</p>"},{"location":"warning_and_error_codes/W0500/#w0502-deprecated-cli-flags-were-included-that-will-safely-be-remapped","title":"W0502: Deprecated CLI flags were included that will safely be remapped.","text":"<p>This warning will be shown if a CLI flag is passed into the isort command that is no longer supported but can safely be remapped to the new version of the flag. If you encounter this warning, you must update the argument to match the new flag before the next major release.</p>"},{"location":"warning_and_error_codes/W0500/#w0503-deprecated-config-options-were-ignored","title":"W0503: Deprecated config options were ignored.","text":"<p>This warning will be shown if a deprecated config option is defined in the Project's isort config file, but can safely be ignored. This is similar to <code>W0500</code> but dealing with config files rather than CLI flags.</p>"}]}